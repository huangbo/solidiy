{
	"id": "1d9e87603cc762b7121b28acb86ef6a4",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"HelloWord.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n// external 外部函数，本合约或者子合约调用需要通过this\n// contract externalTest {\n//     uint8 id;\n//     function setId(uint8 newId) public {\n//         id = newId;\n//     }\n//     function getId() public view returns (uint8) {\n//         return this.getIdByexternal();\n//     }\n\n//     function getIdByexternal() external view returns(uint8) {\n//         return id;\n//     }\n// }\n\n// contract subExternalTest is externalTest {\n//     function getexternalId() public view returns(uint8) {\n//         return this.getIdByexternal();\n//     }\n// }\n\n// internal 内部函数，不使用this\n// contract internalTest {\n//     uint8 internal id;\n//     function setId(uint8 newId) public {\n//         id = newId;\n//     }\n//     function getId() public view returns (uint8) {\n//         return getIdByinternal();\n//     }\n\n//     function getIdByinternal() internal view returns(uint8) {\n//         return id;\n//     }\n// }\n\n// contract subinternalTest is internalTest {\n//     function getsubId() public view returns(uint8) {\n//         return id;\n//     }\n\n//     function getsubexternalId() public view returns(uint8) {\n//         return getIdByinternal();\n//     }\n// }\n\n\n// private 只能当前定义合约中访问，子合约无法访问\n// contract privateTest {\n//     uint8 private id;\n//     function setId(uint8 newId) public {\n//         id = newId;\n//     }\n//     function getId() public view returns (uint8) {\n//         return getIdByprivate();\n//     }\n\n//     function getIdByprivate() private view returns(uint8) {\n//         return id;\n//     }\n// }\n\n// contract subprivateTest is privateTest {\n//     function getsubId() public view returns(uint8) {\n//         // return id;\n//         // return getIdByprivate();\n//         return getId();\n\n//     }\n// }\n\n/*\n 内部调用 不会产生EVM调用也称为消息调用，比如合约内部函数，父合约函数，库函数\n 外部调用 会产生EVM调用，调用其他合约的函数，或者本合约的external函数\n\n public     在合约外部和合约内部都可以调用\n external   外部调用，只能在合约外部调用（如果在合约内部包括继承子合约调用，调用需要通过this，不推荐这样），需要this访问，因为只能在合约外部访问，所以子合约也不能override\n            可以强制将函数存储的位置设置为calldata，这会节约函数执行时所需存储或计算资源\n internal   内部调用，当前合约和继承子合约可以调用\n private    只能当前合约中访问，继承子合约无法访问\n*/\n\n// contract FunctionTypes {\n//     uint256 public number = 5;\n\n//     function add(uint256 n) external pure returns(uint256) {\n//         return n + 1;\n//     }\n\n//     function add1() external view returns(uint256) {\n//         return number + 1;\n//     }\n\n//     function add2() external {\n//         number = 10;\n//     }\n// }\n\n/*\n pure 不能读也不能写链上的状态变量\n view 可以读到链上的状态变量，但是不能写(包括event)\n 默认可以读写\n*/\n\n// contract PayTest {\n//     function getbalance() public view returns(uint){\n//         return address(this).balance;\n//     }\n\n//     function getaddr() public view returns(address){\n//         return address(this);\n//     }\n//     function transferToContract() public payable returns(uint256) {\n//         return address(this).balance;\n//     }\n//     // 给调用者转账\n//     function transferFromContract() public payable {\n//         payable(address(msg.sender)).transfer(10**18 wei);\n//     }\n// }\n\n// contract Payable {\n//     address payable public owner;\n//     constructor() {\n//         owner = payable(msg.sender);\n//     }\n\n//     function deposit() external payable {\n\n//     }\n//     function getBalance() external view returns(uint) {\n//         return address(this).balance;\n//     }\n// }\n\n/*\n payable 函数在被调用的时候会将value转入到合约\n 全局变量 msg.sender msg.value msg表示调用这个函数的地址，可能是一个人也有可能是一个合约\n*/\n\n// contract Constants {\n//     address public constant MY_ADDRESS = 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;\n//     uint public constant MY_UINT = 123;\n// }\n\n// contract ConstantsNew {\n//     address public MY_ADDRESS = 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;\n//     uint public MY_UINT = 123;\n// }\n\n// contract Immutable {\n//     // address public immutable owner = msg.sender;\n\n//     address public immutable owner;\n//     constructor(address x) {\n//         owner = x;\n//     }\n// }\n\n/*\nconstant   更节省gas，如果状态变量声明为 constant (常量)。在这种情况下，只能使用那些在编译时有确定值的表达式来给它们赋值。\nimmutable  比constant更节省gas，声明为不可变量(immutable)的变量的限制要比声明为常量(constant) 的变量的限制少：\n            可以在合约的构造函数中或声明时为不可变的变量分配任意值。 不可变量在构造期间无法读取其值，并且只能赋值一次。\n*/\n\n// contract Error {\n//     error MyError(address caller, uint i);\n\n//     function testRequire(uint _i) public pure {\n//         require(_i <= 10, \"require: i > 10\");\n//     }\n//     function testRevert(uint _r) public pure {\n//         if (_r > 10) {\n//             revert(\"revert: r > 10\");\n//         }\n//     }\n//     function testAssert(uint _a) public pure {\n//         assert(_a == 123);\n//     }\n//     function testCustomError(uint _i) public view {\n//         if (_i > 10) {\n//             revert MyError(msg.sender, _i);\n//         }\n//     }\n// }\n\n/*\nrequire revert assert 具有gas费的退还，状态的回滚\n自定义错误有节省gas的作用\n*/\n\n// contract FunctionModifier {\n//     bool public paused;\n//     uint public count;\n\n//     function setPaused(bool _paused) external {\n//         paused = _paused;\n//     }\n\n//     modifier whenNotPaused() {\n//         require(!paused, \"paused\");\n//         _;\n//     }\n\n//     modifier cap(uint _x) {\n//         require(_x > 10, \"require error\");\n//         _;\n//         count += 1;\n//     }\n\n//     function inc(uint _x) external whenNotPaused cap(_x) {\n//         count += _x;\n//     }\n// }\n\n/*\n函数修改器\n*/\n\n// contract FunctionOutputs {\n//     function returnMany() public pure returns(uint x, bool b) {\n//         return (1, true);\n//     }\n\n//     function callRetrun() public pure returns(bool) {\n//         // (uint x, bool b) = returnMany();\n//         // return (x, b);\n//         (, bool b) = returnMany();\n//         return b;\n//     }\n// }\n\n// contract Array {\n//     uint[] public nums = [1, 2, 3]; // 可变长度数组\n//     uint[3] public numsFixed = [4, 5, 6]; // 不可变长度数组\n\n//     function examples() external {\n//         nums.push(4);\n//         delete nums[1]; // 不能删除元素，置为0，可以使用pop\n//         nums.pop();\n//         uint len = nums.length;\n\n//         // create array in memory，在内存中只能定义定长数组，不能使用push pop方法\n//         uint[] memory a = new uint[](5);\n//     }\n\n//     function getAllArray() external view returns(uint[] memory) {\n//         return nums;\n//     }\n\n// }\n\n// 数组\n\n// contract memoryStorage {\n//     uint public a = 1;\n\n//     function modifierFun(uint memory x) external returns(uint) {\n//         uint b = x;\n//         return b;\n//     }\n// }\n\n/*\n 状态变量 – 变量值永久保存在合约存储空间中的变量。\n 局部变量 – 变量值仅在函数执行过程中有效的变量，函数退出后，变量无效。\n 全局变量 – 保存在全局命名空间，用于获取区块链相关信息的特殊变量。\n\n solidity数据存储位置有三类：storage，memory和calldata。\n memory：函数里的参数和临时变量一般用memory，存储在内存中，不上链。\n calldata：和memory类似，存储在内存中，不上链。与memory的不同点在于calldata变量不能修改 immutable。\n storage：合约中状态变都为storage，存储在以太坊区块链中\n\n storage给storage赋值或者memory给memory赋值，是创建引用，不同之间的两两赋值是创建副本。\n\nExplicit data location for all variables of struct, array or mapping types is now mandatory. \nThis is also applied to function parameters and return variables.\n For example, change uint[] x = m_x to uint[] storage x = m_x, and function f(uint[][] x) to function f(uint[][] memory x) where memory is the data location and might be replaced by storage or calldata accordingly.\n  Note that external functions require parameters with a data location of calldata.\n*/\n\n\n// contract Mapping {\n//     mapping(address => uint) public balances;\n//     mapping(address => mapping(address => bool)) public isFriends;\n\n//     function MappingFun() external {\n//         balances[msg.sender] = 123;\n//         uint val1 = balances[msg.sender];\n//         uint val2 = balances[address(1)]; // 返回uint 的默认值0\n\n//         isFriends[msg.sender][address(this)] = true;\n//     }\n// }\n\n// contract TestContract1 {\n//     address public owner = msg.sender;\n\n//     function setOwner(address _owner) public {\n//         require(msg.sender == owner, \"not owner\");\n//         owner = _owner;\n//     }\n// }\n\n// contract TestContract2 {\n//     address public owner = msg.sender;\n//     uint public value = msg.value;\n//     uint public x;\n//     uint public y;\n\n//     constructor(uint _x, uint _y) payable {\n//         x = _x;\n//         y = _y;\n//     }\n// }\n\n// contract Proxy {\n//     event Deploy(address);\n\n//     function deploy(bytes memory _code) external payable returns (address addr) {\n//         assembly {\n//             addr := create(callvalue(), add(_code, 0x20), mload(_code))\n//         }\n//         require(addr != address(0), \"deploy failed\");\n//         emit Deploy(addr);\n//     }\n\n//     function execute(address _target, bytes memory _data) external payable {\n//         (bool sucess, ) = _target.call{value: msg.value}(_data);\n//         require(sucess, \"failed\");\n//     }\n\n    \n// }\n\n// contract Helper {\n//     function getBytecode1() external pure returns (bytes memory) {\n//         bytes memory bytecode = type(TestContract1).creationCode;\n//         return bytecode;\n//     }\n\n//     function getBytecode2(uint _x, uint _y) external pure returns (bytes memory) {\n//         bytes memory bytecode = type(TestContract2).creationCode;\n//         return abi.encodePacked(bytecode, abi.encode(_x, _y)); // 构造函数\n//     }\n\n//     function getCalldata(address _owner) external pure returns (bytes memory) {\n//         return abi.encodeWithSignature(\"setOwner(address)\", _owner);\n//     }\n// }\n\n// 代理合约\n\n// contract Event {\n//     event Log(string message, uint val);\n//     event IndexedLog(address indexed sender, uint val); // indexed 可以链上检索\n\n//     function example() external { //也是一个写入方法\n//         emit Log(\"foo\", 1234);\n//         emit IndexedLog(msg.sender, 789);\n//     }\n\n//     event Message(address indexed _from, address indexed _to, string message);\n\n//     function sendMessage(address _to, string calldata message) external {\n//         emit Message(msg.sender, _to, message);\n//     }\n\n// }\n\n// contract Account {\n//     address public bank;\n//     address public owner;\n\n//     constructor(address _owner) payable {\n//         owner = _owner;\n//         bank = msg.sender;\n//     }\n// }\n\n// contract AccountFactory {\n//     uint public b;\n//     Account[] public accounts;\n//     function createAccount(address _owner) external payable {\n//         Account account = new Account{value: 111}(_owner);\n//         accounts.push(account);\n//     }\n//     function getBalance(address _owner) external {\n//         b =  _owner.balance;\n//     }\n// }\n\n// 工厂合约\n\n// EVENT 体现在区块链浏览器或者交易记录中的logs中\n\n// contract A {\n//     function foo() public pure virtual returns (string memory) {\n//         return 'A';\n//     }\n// }\n\n// contract B is A {\n//     function foo() public pure override virtual returns (string memory) {\n//         return \"B\";\n//     }\n// }\n\n// contract C is B {\n//     function foo() public pure override virtual returns (string memory) {\n//         return \"C\";\n//     }\n// }\n\n// contract X is A, B { // 顺序从最接近基类的开始到最派生的顺序\n//     function foo() public pure override(A, B) virtual returns (string memory) {\n//         return \"X\";\n//     }\n// }\n// virtual 可以被子合约重写，override 重写父合约\n\n// ---------------\n\n// contract S {\n//     string public name;\n//     constructor(string memory _name) {\n//         name = _name;\n//     }\n// }\n\n// contract T {\n//     string public text;\n//     constructor(string memory _text) {\n//         text = _text;\n//     }\n// }\n\n// contract Z is S, T {\n//     constructor(string memory _name, string memory _text) S(_name) T(_text) {\n\n//     }\n// }\n// 继承构造函数初始化\n\n// contract E {\n//     event Log(string message);\n\n//     function foo() public virtual {\n//         emit Log(\"E.foo\");\n//     }\n\n//     function bar() public virtual {\n//         emit Log(\"E.bar\");\n//     }\n// }\n\n// contract F is E {\n//     function foo() public virtual override {\n//         emit Log(\"F.foo\");\n//         E.foo();\n//     }\n\n//     function bar() public virtual override {\n//         emit Log(\"F.bar\");\n//         super.bar();\n//     }\n// }\n\n// contract G is E {\n//     function foo() public virtual override {\n//         emit Log(\"G.foo\");\n//         E.foo();\n//     }\n\n//     function bar() public virtual override {\n//         emit Log(\"G.bar\");\n//         super.bar();\n//     }\n// }\n\n// contract H is F, G {\n//     function foo() public virtual override(F, G) {\n//         emit Log(\"H.foo\");\n//         F.foo();\n//     }\n\n//     function bar() public virtual override(F, G) {\n//         emit Log(\"H.bar\");\n//         super.bar();\n//     }\n// }\n\n// 调用父级合约\n\n// contract Fallback {\n//     event Log(string func, address sender, uint value, bytes data);\n//     fallback() external payable {\n//         emit Log(\"fallback\", msg.sender, msg.value, msg.data);\n//     }\n//     receive() external payable {\n//         emit Log(\"receive\", msg.sender, msg.value, \"\");\n//     } \n// }\n\n/*\n fallback回退函数当调用函数在合约不存在或者向合约中发放主币的时候（回退函数是payable的时候）\n msg.data存在的时候调用fallback，不存在调用receive，如果receive不存在，那么还是调用fallback\n*/\n\n// contract SendEther {\n//     constructor() payable {}\n//     // receive() external payable {}\n\n//     function getBalance() external view returns (uint) {\n//         return address(this).balance;\n//     }\n//     function sendViaTransfer(address payable _to) external payable {\n//         // 发送主币的时候只携带2300个gas，如果gas消耗完或者发送主币的时候对方拒收或者逻辑异常，会revert\n//         _to.transfer(123);\n//     }\n//     function sendViaSend(address payable _to) external payable {\n//         // 发送主币的时候只携带2300个gas，会返回一个bool值，发送失败不会自动revert交易，几乎没有人用它\n//        bool s = _to.send(123);\n//        require(s, \"send faild\");\n//     }\n\n//     function sendViaCall(address payable _to) external payable {\n//         // 会发送所有剩余的gas，返回一个bool和一个data，是最提倡的方法\n//        (bool success, ) =  _to.call{value: 123}(\"\");\n//        require(success, \"call faild\");\n//     }\n// }\n\n// contract EthReceiver {\n//     event Log(uint amount , uint gas);\n\n//     receive() external payable {\n//         emit Log(msg.value, gasleft());\n//     } \n// }\n// 三种发送主币的方法\n\n// contract TestContract {\n//     uint public x;\n//     uint public value = 123;\n\n//     function setX(uint _x) external {\n//         x = _x;\n//     }\n//     function getX() external view returns(uint) {\n//         return x;\n//     }\n//     function setXandReceiveEther(uint _x) external payable {\n//         x = _x;\n//         value = msg.value;\n//     }\n//     function getXandValue() external view returns (uint, uint) {\n//         return (x, value);\n//     }\n// }\n\n// contract CallTestContract {\n//     function setX(address _address, uint _x) external {\n//         TestContract(_address).setX(_x);\n//     }\n//     function getX(address _address) external view returns (uint) {\n//         return TestContract(_address).getX();\n//     } \n//     function setXandReceiveEther(address _address, uint _x) external payable {\n//         TestContract(_address).setX(_x);\n//         TestContract(_address).setXandReceiveEther{value: msg.value}(_x);\n//     }\n//     function getXandValue(address _address) external view returns (uint _x, uint _value) {\n//         (_x, _value) = TestContract(_address).getXandValue();\n//     }\n// }\n// 一个合约调用另一个合约\n\n// contract Counter {\n//     uint public count;\n\n//     function inc() external {\n//         count += 1;\n//     }\n\n// }\n\n// interface ICounter {\n//     function count() external view returns (uint);\n//     function inc() external;\n// }\n\n// contract CallInterface {\n//     uint public count;\n//     function callExample(address _address) external returns(uint) {\n//         ICounter(_address).inc();\n//         count = ICounter(_address).count();\n//         return count;\n//     }\n// }\n// 接口合约\n// 所有函数都必须是external且不能有函数体, 继承接口的合约必须实现接口定义的所有功能\n\ncontract interactBAYC {\n    // 利用BAYC地址创建接口合约变量（ETH主网）\n    IERC721 BAYC = IERC721(0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D);\n\n    // 通过接口调用BAYC的balanceOf()查询持仓量\n    function balanceOfBAYC(address owner) external view returns (uint256 balance){\n        return BAYC.balanceOf(owner);\n    }\n\n    // 通过接口调用BAYC的safeTransferFrom()安全转账\n    function safeTransferFromBAYC(address from, address to, uint256 tokenId) external{\n        BAYC.safeTransferFrom(from, to, tokenId);\n    }\n}\n\n/*\n 无聊猿BAYC属于ERC721代币，实现了IERC721接口的功能。我们不需要知道它的源代码，只需知道它的合约地址，用IERC721接口就可以与它交互，\n 比如用balanceOf()来查询某个地址的BAYC余额，用safeTransferFrom()来转账BAYC。\n*/\n\n\n// contract TestCall {\n//     string public message;\n//     uint public x;\n\n//     event Log(string message);\n\n//     fallback() external payable {\n//         emit Log(\"fallback was called\");\n//     }\n\n//     function foo(string memory _message, uint _x) external payable returns (bool, uint) {\n//         message = _message;\n//         x = _x;\n//         return (true, 999);\n//     }\n// }\n\n// contract Call {\n//     bytes public data;\n//     function callFoo(address _address) external payable {\n//         (bool success, bytes memory _data) = _address.call{value: 111}(abi.encodeWithSignature(\"foo(string,uint256)\", \"call foo\", 123));\n//         require(success, \"call faild\");\n//         data = _data;\n//     }\n\n//     function callDotExit(address _address) external {\n//         (bool success, ) = _address.call(abi.encodeWithSignature(\"callDotExit()\"));\n//         require(success, \"call faild\");\n//     }\n// }\n\n// 低级call使用\n\n\n// contract TestDelegateCall {\n//     uint public num;\n//     address public sender;\n//     uint public value;\n\n//     function setVars(uint _num) external payable {\n//         num = _num;\n//         sender = msg.sender;\n//         value = msg.value;\n//     }\n// }\n\n// contract DelegateCall {\n//     uint public num;\n//     address public sender;\n//     uint public value;\n\n//     function setVars(address _address, uint _num) external payable {\n//         // _address.delegatecall(abi.encodeWithSignature(\"setVars(uint256)\", _num));\n//         (bool success, bytes memory _data) = _address.delegatecall(\n//             abi.encodeWithSelector(TestDelegateCall.setVars.selector, _num)\n//         );\n//         require(success, \"fail call\");\n//     }\n// }\n\n// 委托调用，被委托调用合约的状态变量不会改变，只会使用被委托调用合约的逻辑。被调用合约相当于一个工具放到调用合约中\n\n\n\n// contract TestMultiCall {\n//     function func1() external view returns(uint, uint) {\n//         return (1, block.timestamp);\n//     }\n//     function func2() external view returns(uint, uint) {\n//         return (2, block.timestamp);\n//     }\n\n//     function getData1() external pure returns (bytes memory) {\n//         return abi.encodeWithSelector(this.func1.selector);\n//     }\n//     function getData2() external pure returns (bytes memory) {\n//         return abi.encodeWithSelector(this.func2.selector);\n//     }\n// }\n\n// contract MultiCall {\n//     function multiCall(address[] calldata targets, bytes[] calldata data) external view returns(bytes[] memory) {\n//         require(targets.length == data.length, \"target length != data length\");\n//         bytes[] memory results = new bytes[](data.length);\n//         for (uint i = 0; i < targets.length; i++) {\n//             (bool success, bytes memory result) = targets[i].staticcall(data[i]);\n//             require(success, \"call faild\");\n//             results[i] = result;\n//         }\n//         return results;\n//     }\n// }\n\n/* 静态调用 call staticcall \nrpc节点限制每个客户端调用频率，合约的调用打包成一起一次性调用\ncall consumes less gas than calling the function on the contract instance. \nSo in some cases call is preferred for gas optimisation.\nSolidity has 2 more low level functions delegatecall and staticcall . staticcall is exactly the same as call with only difference that it cannot modify state of the contract being called. delegatecall is discussed below.\n*/\n\n\n\n// library ArrayLib {\n//     function find(uint[] storage _arr, uint x) internal view returns(uint) {\n//         for (uint i = 0; i < _arr.length; i++) {\n//             if (_arr[i] == x) {\n//                 return i;\n//             }\n//         }\n//         return 10;\n\n//     }\n// }\n\n// contract TestArray {\n//     using ArrayLib for uint[];\n//     uint[] public arr = [1, 3, 2];\n\n//     function findTest() external view returns(uint) {\n//         // return ArrayLib.find(2);\n//         return arr.find(2); // 更推荐\n//     }\n// }\n// 库合约的调用\n// 如果有许多合约，它们有一些共同代码，则可以把共同代码部署成一个库。这将节省gas，因为gas也依赖于合约的规模。因此，可以把库想象成使用其合约的父合约。\n// 使用父合约（而非库）切分共同代码不会节省gas，因为在Solidity中，继承通过复制代码工作。\n\n\n// contract hashF {\n//     function hash(string memory _text, string memory _otherText) external pure returns(bytes32) {\n//         // return keccak256(abi.encode(_text, _otherText));\n//         return keccak256(abi.encodePacked(_text, _otherText));\n//     }\n// }\n\n/* hash算法 \n1. 输入值相同输出值一定相同 2. 不可逆\nabi.encodePacked 结果不补0 \"AAA\" \"BBB\" 和 \"AA\" \"ABBB\" 结果相同，可能会有不同的输入值相同的hasn值，可以在两个打包的字符串之间加上一个隔断符号\nabi.encode 结果补0\n\n*/ \n\n\n// contract VerfySig {\n//     function verify(address _signer, string memory _message, bytes memory _sig)\n//         external pure returns(bool) \n//     {\n//         bytes32 messageHash = getMessageHash(_message);\n//         bytes32 ethSignMessageHash = getEthSigndMessageHash(messageHash);\n//         return recover(ethSignMessageHash, _sig) == _signer;\n//     }\n\n//     function getMessageHash(string memory _message) public pure returns(bytes32) {\n//         return keccak256(abi.encodePacked(_message));\n//     }\n//     function getEthSigndMessageHash(bytes32 _message) public pure returns(bytes32) {\n//         return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _message));\n//     }\n//     function recover(bytes32 _ethSignedMessageHash, bytes memory _sig) public pure returns(address) {\n//         (bytes32 r, bytes32 s, uint8 v) = _split(_sig);\n//         return ecrecover(_ethSignedMessageHash, v, r, s);\n//     }\n\n//     function _split(bytes memory _sig) internal pure returns(bytes32 r, bytes32 s, uint8 v) {\n//         require(_sig.length == 65, \"invalid signature length\");\n//         assembly {\n//             r := mload(add(_sig, 32))\n//             s := mload(add(_sig, 64))\n//             v := byte(0, mload(add(_sig, 96)))\n//         }\n//     }\n// }\n/*\nChrome Metamask \nethereum.enable()\naccount = \"0xc4cb0f670dfdc7c28f49f63feaacb2e10bafdec7\"\nhash = \"0x9c97d796ed69b7e69790ae723f51163056db3d55a7a6a82065780460162d4812\"\nethereum.request({method: \"personal_sign\", params: [account, hash]})\n*/\n\n// contract Kill {\n//     constructor() payable {}\n//     function kill() external {\n//         selfdestruct(payable(msg.sender));\n//     }\n//     function test() external pure returns(uint) {\n//         return 123;\n//     }\n// }\n\n// 1 删除合约 2 强制发送主币到一个地址，为什么说强制，即使接受合约没有接受主币的回退函数都可以接受\n\n// interface IERC721 {\n//     function transferFrom(\n//         address _from,\n//         address _to,\n//         uint _nftId\n//     ) external;\n// }\n\n// contract DutchAuction {\n//     uint private constant DURATION = 7 days;\n\n//     IERC721 public immutable nft;\n//     uint public immutable nftId;\n\n//     address payable public immutable seller;\n//     uint public immutable startingPrice;\n//     uint public immutable startAt;\n//     uint public immutable expiresAt;\n//     uint public immutable discountRate;\n\n//     constructor(\n//         uint _startingPrice,\n//         uint _discountRate,\n//         address _nft,\n//         uint _nftId\n//     ) {\n//         seller = payable(msg.sender);\n//         startingPrice = _startingPrice;\n//         startAt = block.timestamp;\n//         expiresAt = block.timestamp + DURATION;\n//         discountRate = _discountRate;\n\n//         require(_startingPrice >= _discountRate * DURATION, \"starting price < min\");\n\n//         nft = IERC721(_nft);\n//         nftId = _nftId;\n//     }\n\n//     function getPrice() public view returns (uint) {\n//         uint timeElapsed = block.timestamp - startAt;\n//         uint discount = discountRate * timeElapsed;\n//         return startingPrice - discount;\n//     }\n\n//     function buy() external payable {\n//         require(block.timestamp < expiresAt, \"auction expired\");\n\n//         uint price = getPrice();\n//         require(msg.value >= price, \"ETH < price\");\n\n//         nft.transferFrom(seller, msg.sender, nftId);\n//         uint refund = msg.value - price;\n//         if (refund > 0) {\n//             payable(msg.sender).transfer(refund);\n//         }\n//         selfdestruct(seller);\n//     }\n// }\n\n// 荷兰拍卖\n\n\n/*\n. 只能合约中所有的变量都可以直接获取到 any value in a smart contract storage can be accessed directly\n  包括private变量，可以直接获取到web3.eth.getStorageAt(\"0x1f5d666f191c4d757854266ee661c47b0012f894\", 0)\n\n*/\n\n\n// contract Bank {\n//   uint256 public bank_funds;\n//   address public owner;\n//   address public deployer;\n\n//   constructor(address _owner, uint256 _funds) {\n//     bank_funds = _funds;\n//     owner = _owner;\n//     deployer = msg.sender;\n//   }\n// }\n\n// contract BankFactory {\n//   // instantiate Bank contract\n//   Bank bank;\n//   //keep track of created Bank addresses in array \n//   Bank[] public list_of_banks;\n\n//   // function arguments are passed to the constructor of the new created contract \n//   function createBank(address _owner, uint256 _funds) external {\n//     bank = new Bank(_owner, _funds);\n//     list_of_banks.push(bank);\n//   }\n// }\n\n// New"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://20a97f891d06f0fe91560ea1a142aaa26fdd22bed1b51606b7d48f670deeb50f\",\"dweb:/ipfs/QmTbCtZKChpaX5H2iRiTDMcSz29GSLCpTCDgJpcMR4wg8x\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"HelloWord.sol": {
				"interactBAYC": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOfBAYC",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFromBAYC",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"HelloWord.sol\":17638:18192  contract interactBAYC {... */\n  mstore(0x40, 0x80)\n    /* \"HelloWord.sol\":17752:17794  0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D */\n  0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\n    /* \"HelloWord.sol\":17729:17795  IERC721 BAYC = IERC721(0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D) */\n  0x00\n  dup1\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"HelloWord.sol\":17638:18192  contract interactBAYC {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"HelloWord.sol\":17638:18192  contract interactBAYC {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x5b4f65bf\n      eq\n      tag_3\n      jumpi\n      dup1\n      0xfec8a8a5\n      eq\n      tag_4\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"HelloWord.sol\":17861:17983  function balanceOfBAYC(address owner) external view returns (uint256 balance){... */\n    tag_3:\n      tag_5\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_6\n      swap2\n      swap1\n      tag_7\n      jump\t// in\n    tag_6:\n      tag_8\n      jump\t// in\n    tag_5:\n      mload(0x40)\n      tag_9\n      swap2\n      swap1\n      tag_10\n      jump\t// in\n    tag_9:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"HelloWord.sol\":18052:18190  function safeTransferFromBAYC(address from, address to, uint256 tokenId) external{... */\n    tag_4:\n      tag_11\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_12\n      swap2\n      swap1\n      tag_13\n      jump\t// in\n    tag_12:\n      tag_14\n      jump\t// in\n    tag_11:\n      stop\n        /* \"HelloWord.sol\":17861:17983  function balanceOfBAYC(address owner) external view returns (uint256 balance){... */\n    tag_8:\n        /* \"HelloWord.sol\":17922:17937  uint256 balance */\n      0x00\n        /* \"HelloWord.sol\":17955:17959  BAYC */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"HelloWord.sol\":17955:17969  BAYC.balanceOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x70a08231\n        /* \"HelloWord.sol\":17970:17975  owner */\n      dup4\n        /* \"HelloWord.sol\":17955:17976  BAYC.balanceOf(owner) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_16\n      swap2\n      swap1\n      tag_17\n      jump\t// in\n    tag_16:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_18\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_18:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_20\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_20:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_21\n      swap2\n      swap1\n      tag_22\n      jump\t// in\n    tag_21:\n        /* \"HelloWord.sol\":17948:17976  return BAYC.balanceOf(owner) */\n      swap1\n      pop\n        /* \"HelloWord.sol\":17861:17983  function balanceOfBAYC(address owner) external view returns (uint256 balance){... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"HelloWord.sol\":18052:18190  function safeTransferFromBAYC(address from, address to, uint256 tokenId) external{... */\n    tag_14:\n        /* \"HelloWord.sol\":18143:18147  BAYC */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"HelloWord.sol\":18143:18164  BAYC.safeTransferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x42842e0e\n        /* \"HelloWord.sol\":18165:18169  from */\n      dup5\n        /* \"HelloWord.sol\":18171:18173  to */\n      dup5\n        /* \"HelloWord.sol\":18175:18182  tokenId */\n      dup5\n        /* \"HelloWord.sol\":18143:18183  BAYC.safeTransferFrom(from, to, tokenId) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_24\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_25\n      jump\t// in\n    tag_24:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_26\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_26:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_28\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_28:\n      pop\n      pop\n      pop\n      pop\n        /* \"HelloWord.sol\":18052:18190  function safeTransferFromBAYC(address from, address to, uint256 tokenId) external{... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:146   */\n    tag_30:\n        /* \"#utility.yul\":53:58   */\n      0x00\n        /* \"#utility.yul\":91:97   */\n      dup2\n        /* \"#utility.yul\":78:98   */\n      calldataload\n        /* \"#utility.yul\":69:98   */\n      swap1\n      pop\n        /* \"#utility.yul\":107:140   */\n      tag_32\n        /* \"#utility.yul\":134:139   */\n      dup2\n        /* \"#utility.yul\":107:140   */\n      tag_33\n      jump\t// in\n    tag_32:\n        /* \"#utility.yul\":7:146   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":152:291   */\n    tag_34:\n        /* \"#utility.yul\":198:203   */\n      0x00\n        /* \"#utility.yul\":236:242   */\n      dup2\n        /* \"#utility.yul\":223:243   */\n      calldataload\n        /* \"#utility.yul\":214:243   */\n      swap1\n      pop\n        /* \"#utility.yul\":252:285   */\n      tag_36\n        /* \"#utility.yul\":279:284   */\n      dup2\n        /* \"#utility.yul\":252:285   */\n      tag_37\n      jump\t// in\n    tag_36:\n        /* \"#utility.yul\":152:291   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":297:440   */\n    tag_38:\n        /* \"#utility.yul\":354:359   */\n      0x00\n        /* \"#utility.yul\":385:391   */\n      dup2\n        /* \"#utility.yul\":379:392   */\n      mload\n        /* \"#utility.yul\":370:392   */\n      swap1\n      pop\n        /* \"#utility.yul\":401:434   */\n      tag_40\n        /* \"#utility.yul\":428:433   */\n      dup2\n        /* \"#utility.yul\":401:434   */\n      tag_37\n      jump\t// in\n    tag_40:\n        /* \"#utility.yul\":297:440   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":446:775   */\n    tag_7:\n        /* \"#utility.yul\":505:511   */\n      0x00\n        /* \"#utility.yul\":554:556   */\n      0x20\n        /* \"#utility.yul\":542:551   */\n      dup3\n        /* \"#utility.yul\":533:540   */\n      dup5\n        /* \"#utility.yul\":529:552   */\n      sub\n        /* \"#utility.yul\":525:557   */\n      slt\n        /* \"#utility.yul\":522:641   */\n      iszero\n      tag_42\n      jumpi\n        /* \"#utility.yul\":560:639   */\n      tag_43\n      tag_44\n      jump\t// in\n    tag_43:\n        /* \"#utility.yul\":522:641   */\n    tag_42:\n        /* \"#utility.yul\":680:681   */\n      0x00\n        /* \"#utility.yul\":705:758   */\n      tag_45\n        /* \"#utility.yul\":750:757   */\n      dup5\n        /* \"#utility.yul\":741:747   */\n      dup3\n        /* \"#utility.yul\":730:739   */\n      dup6\n        /* \"#utility.yul\":726:748   */\n      add\n        /* \"#utility.yul\":705:758   */\n      tag_30\n      jump\t// in\n    tag_45:\n        /* \"#utility.yul\":695:758   */\n      swap2\n      pop\n        /* \"#utility.yul\":651:768   */\n      pop\n        /* \"#utility.yul\":446:775   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":781:1400   */\n    tag_13:\n        /* \"#utility.yul\":858:864   */\n      0x00\n        /* \"#utility.yul\":866:872   */\n      dup1\n        /* \"#utility.yul\":874:880   */\n      0x00\n        /* \"#utility.yul\":923:925   */\n      0x60\n        /* \"#utility.yul\":911:920   */\n      dup5\n        /* \"#utility.yul\":902:909   */\n      dup7\n        /* \"#utility.yul\":898:921   */\n      sub\n        /* \"#utility.yul\":894:926   */\n      slt\n        /* \"#utility.yul\":891:1010   */\n      iszero\n      tag_47\n      jumpi\n        /* \"#utility.yul\":929:1008   */\n      tag_48\n      tag_44\n      jump\t// in\n    tag_48:\n        /* \"#utility.yul\":891:1010   */\n    tag_47:\n        /* \"#utility.yul\":1049:1050   */\n      0x00\n        /* \"#utility.yul\":1074:1127   */\n      tag_49\n        /* \"#utility.yul\":1119:1126   */\n      dup7\n        /* \"#utility.yul\":1110:1116   */\n      dup3\n        /* \"#utility.yul\":1099:1108   */\n      dup8\n        /* \"#utility.yul\":1095:1117   */\n      add\n        /* \"#utility.yul\":1074:1127   */\n      tag_30\n      jump\t// in\n    tag_49:\n        /* \"#utility.yul\":1064:1127   */\n      swap4\n      pop\n        /* \"#utility.yul\":1020:1137   */\n      pop\n        /* \"#utility.yul\":1176:1178   */\n      0x20\n        /* \"#utility.yul\":1202:1255   */\n      tag_50\n        /* \"#utility.yul\":1247:1254   */\n      dup7\n        /* \"#utility.yul\":1238:1244   */\n      dup3\n        /* \"#utility.yul\":1227:1236   */\n      dup8\n        /* \"#utility.yul\":1223:1245   */\n      add\n        /* \"#utility.yul\":1202:1255   */\n      tag_30\n      jump\t// in\n    tag_50:\n        /* \"#utility.yul\":1192:1255   */\n      swap3\n      pop\n        /* \"#utility.yul\":1147:1265   */\n      pop\n        /* \"#utility.yul\":1304:1306   */\n      0x40\n        /* \"#utility.yul\":1330:1383   */\n      tag_51\n        /* \"#utility.yul\":1375:1382   */\n      dup7\n        /* \"#utility.yul\":1366:1372   */\n      dup3\n        /* \"#utility.yul\":1355:1364   */\n      dup8\n        /* \"#utility.yul\":1351:1373   */\n      add\n        /* \"#utility.yul\":1330:1383   */\n      tag_34\n      jump\t// in\n    tag_51:\n        /* \"#utility.yul\":1320:1383   */\n      swap2\n      pop\n        /* \"#utility.yul\":1275:1393   */\n      pop\n        /* \"#utility.yul\":781:1400   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1406:1757   */\n    tag_22:\n        /* \"#utility.yul\":1476:1482   */\n      0x00\n        /* \"#utility.yul\":1525:1527   */\n      0x20\n        /* \"#utility.yul\":1513:1522   */\n      dup3\n        /* \"#utility.yul\":1504:1511   */\n      dup5\n        /* \"#utility.yul\":1500:1523   */\n      sub\n        /* \"#utility.yul\":1496:1528   */\n      slt\n        /* \"#utility.yul\":1493:1612   */\n      iszero\n      tag_53\n      jumpi\n        /* \"#utility.yul\":1531:1610   */\n      tag_54\n      tag_44\n      jump\t// in\n    tag_54:\n        /* \"#utility.yul\":1493:1612   */\n    tag_53:\n        /* \"#utility.yul\":1651:1652   */\n      0x00\n        /* \"#utility.yul\":1676:1740   */\n      tag_55\n        /* \"#utility.yul\":1732:1739   */\n      dup5\n        /* \"#utility.yul\":1723:1729   */\n      dup3\n        /* \"#utility.yul\":1712:1721   */\n      dup6\n        /* \"#utility.yul\":1708:1730   */\n      add\n        /* \"#utility.yul\":1676:1740   */\n      tag_38\n      jump\t// in\n    tag_55:\n        /* \"#utility.yul\":1666:1740   */\n      swap2\n      pop\n        /* \"#utility.yul\":1622:1750   */\n      pop\n        /* \"#utility.yul\":1406:1757   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1763:1881   */\n    tag_56:\n        /* \"#utility.yul\":1850:1874   */\n      tag_58\n        /* \"#utility.yul\":1868:1873   */\n      dup2\n        /* \"#utility.yul\":1850:1874   */\n      tag_59\n      jump\t// in\n    tag_58:\n        /* \"#utility.yul\":1845:1848   */\n      dup3\n        /* \"#utility.yul\":1838:1875   */\n      mstore\n        /* \"#utility.yul\":1763:1881   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1887:2005   */\n    tag_60:\n        /* \"#utility.yul\":1974:1998   */\n      tag_62\n        /* \"#utility.yul\":1992:1997   */\n      dup2\n        /* \"#utility.yul\":1974:1998   */\n      tag_63\n      jump\t// in\n    tag_62:\n        /* \"#utility.yul\":1969:1972   */\n      dup3\n        /* \"#utility.yul\":1962:1999   */\n      mstore\n        /* \"#utility.yul\":1887:2005   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2011:2233   */\n    tag_17:\n        /* \"#utility.yul\":2104:2108   */\n      0x00\n        /* \"#utility.yul\":2142:2144   */\n      0x20\n        /* \"#utility.yul\":2131:2140   */\n      dup3\n        /* \"#utility.yul\":2127:2145   */\n      add\n        /* \"#utility.yul\":2119:2145   */\n      swap1\n      pop\n        /* \"#utility.yul\":2155:2226   */\n      tag_65\n        /* \"#utility.yul\":2223:2224   */\n      0x00\n        /* \"#utility.yul\":2212:2221   */\n      dup4\n        /* \"#utility.yul\":2208:2225   */\n      add\n        /* \"#utility.yul\":2199:2205   */\n      dup5\n        /* \"#utility.yul\":2155:2226   */\n      tag_56\n      jump\t// in\n    tag_65:\n        /* \"#utility.yul\":2011:2233   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2239:2681   */\n    tag_25:\n        /* \"#utility.yul\":2388:2392   */\n      0x00\n        /* \"#utility.yul\":2426:2428   */\n      0x60\n        /* \"#utility.yul\":2415:2424   */\n      dup3\n        /* \"#utility.yul\":2411:2429   */\n      add\n        /* \"#utility.yul\":2403:2429   */\n      swap1\n      pop\n        /* \"#utility.yul\":2439:2510   */\n      tag_67\n        /* \"#utility.yul\":2507:2508   */\n      0x00\n        /* \"#utility.yul\":2496:2505   */\n      dup4\n        /* \"#utility.yul\":2492:2509   */\n      add\n        /* \"#utility.yul\":2483:2489   */\n      dup7\n        /* \"#utility.yul\":2439:2510   */\n      tag_56\n      jump\t// in\n    tag_67:\n        /* \"#utility.yul\":2520:2592   */\n      tag_68\n        /* \"#utility.yul\":2588:2590   */\n      0x20\n        /* \"#utility.yul\":2577:2586   */\n      dup4\n        /* \"#utility.yul\":2573:2591   */\n      add\n        /* \"#utility.yul\":2564:2570   */\n      dup6\n        /* \"#utility.yul\":2520:2592   */\n      tag_56\n      jump\t// in\n    tag_68:\n        /* \"#utility.yul\":2602:2674   */\n      tag_69\n        /* \"#utility.yul\":2670:2672   */\n      0x40\n        /* \"#utility.yul\":2659:2668   */\n      dup4\n        /* \"#utility.yul\":2655:2673   */\n      add\n        /* \"#utility.yul\":2646:2652   */\n      dup5\n        /* \"#utility.yul\":2602:2674   */\n      tag_60\n      jump\t// in\n    tag_69:\n        /* \"#utility.yul\":2239:2681   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2687:2909   */\n    tag_10:\n        /* \"#utility.yul\":2780:2784   */\n      0x00\n        /* \"#utility.yul\":2818:2820   */\n      0x20\n        /* \"#utility.yul\":2807:2816   */\n      dup3\n        /* \"#utility.yul\":2803:2821   */\n      add\n        /* \"#utility.yul\":2795:2821   */\n      swap1\n      pop\n        /* \"#utility.yul\":2831:2902   */\n      tag_71\n        /* \"#utility.yul\":2899:2900   */\n      0x00\n        /* \"#utility.yul\":2888:2897   */\n      dup4\n        /* \"#utility.yul\":2884:2901   */\n      add\n        /* \"#utility.yul\":2875:2881   */\n      dup5\n        /* \"#utility.yul\":2831:2902   */\n      tag_60\n      jump\t// in\n    tag_71:\n        /* \"#utility.yul\":2687:2909   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2996:3092   */\n    tag_59:\n        /* \"#utility.yul\":3033:3040   */\n      0x00\n        /* \"#utility.yul\":3062:3086   */\n      tag_75\n        /* \"#utility.yul\":3080:3085   */\n      dup3\n        /* \"#utility.yul\":3062:3086   */\n      tag_76\n      jump\t// in\n    tag_75:\n        /* \"#utility.yul\":3051:3086   */\n      swap1\n      pop\n        /* \"#utility.yul\":2996:3092   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3098:3224   */\n    tag_76:\n        /* \"#utility.yul\":3135:3142   */\n      0x00\n        /* \"#utility.yul\":3175:3217   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":3168:3173   */\n      dup3\n        /* \"#utility.yul\":3164:3218   */\n      and\n        /* \"#utility.yul\":3153:3218   */\n      swap1\n      pop\n        /* \"#utility.yul\":3098:3224   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3230:3307   */\n    tag_63:\n        /* \"#utility.yul\":3267:3274   */\n      0x00\n        /* \"#utility.yul\":3296:3301   */\n      dup2\n        /* \"#utility.yul\":3285:3301   */\n      swap1\n      pop\n        /* \"#utility.yul\":3230:3307   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3436:3553   */\n    tag_44:\n        /* \"#utility.yul\":3545:3546   */\n      0x00\n        /* \"#utility.yul\":3542:3543   */\n      dup1\n        /* \"#utility.yul\":3535:3547   */\n      revert\n        /* \"#utility.yul\":3559:3681   */\n    tag_33:\n        /* \"#utility.yul\":3632:3656   */\n      tag_83\n        /* \"#utility.yul\":3650:3655   */\n      dup2\n        /* \"#utility.yul\":3632:3656   */\n      tag_59\n      jump\t// in\n    tag_83:\n        /* \"#utility.yul\":3625:3630   */\n      dup2\n        /* \"#utility.yul\":3622:3657   */\n      eq\n        /* \"#utility.yul\":3612:3675   */\n      tag_84\n      jumpi\n        /* \"#utility.yul\":3671:3672   */\n      0x00\n        /* \"#utility.yul\":3668:3669   */\n      dup1\n        /* \"#utility.yul\":3661:3673   */\n      revert\n        /* \"#utility.yul\":3612:3675   */\n    tag_84:\n        /* \"#utility.yul\":3559:3681   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3687:3809   */\n    tag_37:\n        /* \"#utility.yul\":3760:3784   */\n      tag_86\n        /* \"#utility.yul\":3778:3783   */\n      dup2\n        /* \"#utility.yul\":3760:3784   */\n      tag_63\n      jump\t// in\n    tag_86:\n        /* \"#utility.yul\":3753:3758   */\n      dup2\n        /* \"#utility.yul\":3750:3785   */\n      eq\n        /* \"#utility.yul\":3740:3803   */\n      tag_87\n      jumpi\n        /* \"#utility.yul\":3799:3800   */\n      0x00\n        /* \"#utility.yul\":3796:3797   */\n      dup1\n        /* \"#utility.yul\":3789:3801   */\n      revert\n        /* \"#utility.yul\":3740:3803   */\n    tag_87:\n        /* \"#utility.yul\":3687:3809   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220708c51192a04e8d02f374613a559d0c34956c06367719011d852a19c266924c064736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405273bc4ca0eda7647a8ab7c2061c2e118a18a936f13d6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561006457600080fd5b506103ea806100746000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80635b4f65bf1461003b578063fec8a8a51461006b575b600080fd5b6100556004803603810190610050919061020d565b610087565b604051610062919061032a565b60405180910390f35b6100856004803603810190610080919061023a565b61013a565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016100e391906102d8565b60206040518083038186803b1580156100fb57600080fd5b505afa15801561010f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610133919061028d565b9050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e8484846040518463ffffffff1660e01b8152600401610197939291906102f3565b600060405180830381600087803b1580156101b157600080fd5b505af11580156101c5573d6000803e3d6000fd5b50505050505050565b6000813590506101dd81610386565b92915050565b6000813590506101f28161039d565b92915050565b6000815190506102078161039d565b92915050565b60006020828403121561022357610222610381565b5b6000610231848285016101ce565b91505092915050565b60008060006060848603121561025357610252610381565b5b6000610261868287016101ce565b9350506020610272868287016101ce565b9250506040610283868287016101e3565b9150509250925092565b6000602082840312156102a3576102a2610381565b5b60006102b1848285016101f8565b91505092915050565b6102c381610345565b82525050565b6102d281610377565b82525050565b60006020820190506102ed60008301846102ba565b92915050565b600060608201905061030860008301866102ba565b61031560208301856102ba565b61032260408301846102c9565b949350505050565b600060208201905061033f60008301846102c9565b92915050565b600061035082610357565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b61038f81610345565b811461039a57600080fd5b50565b6103a681610377565b81146103b157600080fd5b5056fea2646970667358221220708c51192a04e8d02f374613a559d0c34956c06367719011d852a19c266924c064736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH20 0xBC4CA0EDA7647A8AB7C2061C2E118A18A936F13D PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH2 0x64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3EA DUP1 PUSH2 0x74 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5B4F65BF EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xFEC8A8A5 EQ PUSH2 0x6B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x55 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x20D JUMP JUMPDEST PUSH2 0x87 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x62 SWAP2 SWAP1 PUSH2 0x32A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x85 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x80 SWAP2 SWAP1 PUSH2 0x23A JUMP JUMPDEST PUSH2 0x13A JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x2D8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x10F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x133 SWAP2 SWAP1 PUSH2 0x28D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42842E0E DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x197 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2F3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1DD DUP2 PUSH2 0x386 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1F2 DUP2 PUSH2 0x39D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x207 DUP2 PUSH2 0x39D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x223 JUMPI PUSH2 0x222 PUSH2 0x381 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x231 DUP5 DUP3 DUP6 ADD PUSH2 0x1CE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x253 JUMPI PUSH2 0x252 PUSH2 0x381 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x261 DUP7 DUP3 DUP8 ADD PUSH2 0x1CE JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x272 DUP7 DUP3 DUP8 ADD PUSH2 0x1CE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x283 DUP7 DUP3 DUP8 ADD PUSH2 0x1E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A3 JUMPI PUSH2 0x2A2 PUSH2 0x381 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2B1 DUP5 DUP3 DUP6 ADD PUSH2 0x1F8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2C3 DUP2 PUSH2 0x345 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2D2 DUP2 PUSH2 0x377 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2ED PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2BA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x308 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2BA JUMP JUMPDEST PUSH2 0x315 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2BA JUMP JUMPDEST PUSH2 0x322 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2C9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x33F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2C9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x350 DUP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38F DUP2 PUSH2 0x345 JUMP JUMPDEST DUP2 EQ PUSH2 0x39A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x3A6 DUP2 PUSH2 0x377 JUMP JUMPDEST DUP2 EQ PUSH2 0x3B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH17 0x8C51192A04E8D02F374613A559D0C34956 0xC0 PUSH4 0x67719011 0xD8 MSTORE LOG1 SWAP13 0x26 PUSH10 0x24C064736F6C63430008 SMOD STOP CALLER ",
							"sourceMap": "17638:554:2:-:0;;;17752:42;17729:66;;;;;;;;;;;;;;;;;;;;17638:554;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@balanceOfBAYC_149": {
									"entryPoint": 135,
									"id": 149,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@safeTransferFromBAYC_167": {
									"entryPoint": 314,
									"id": 167,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"abi_decode_t_address": {
									"entryPoint": 462,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 483,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256_fromMemory": {
									"entryPoint": 504,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 525,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 570,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 653,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 698,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 713,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 728,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 755,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 810,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 837,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 855,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 887,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 897,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 902,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 925,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:3812:3",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "59:87:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "69:29:3",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "91:6:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "78:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "78:20:3"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "69:5:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "134:5:3"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "107:26:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "107:33:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "107:33:3"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "37:6:3",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "45:3:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:3",
														"type": ""
													}
												],
												"src": "7:139:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "204:87:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "214:29:3",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "236:6:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "223:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:20:3"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "214:5:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "279:5:3"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "252:26:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "252:33:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "252:33:3"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "182:6:3",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "190:3:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "198:5:3",
														"type": ""
													}
												],
												"src": "152:139:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "360:80:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "370:22:3",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "385:6:3"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "379:5:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "379:13:3"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "370:5:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "428:5:3"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "401:26:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "401:33:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "401:33:3"
														}
													]
												},
												"name": "abi_decode_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "338:6:3",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "346:3:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "354:5:3",
														"type": ""
													}
												],
												"src": "297:143:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "512:263:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "558:83:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "560:77:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "560:79:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "560:79:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "533:7:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "542:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "529:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "529:23:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "554:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "525:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "525:32:3"
															},
															"nodeType": "YulIf",
															"src": "522:119:3"
														},
														{
															"nodeType": "YulBlock",
															"src": "651:117:3",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "666:15:3",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "680:1:3",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "670:6:3",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "695:63:3",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "730:9:3"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "741:6:3"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "726:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "726:22:3"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "750:7:3"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "705:20:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "705:53:3"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "695:6:3"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "482:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "493:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "505:6:3",
														"type": ""
													}
												],
												"src": "446:329:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "881:519:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "927:83:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "929:77:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "929:79:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "929:79:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "902:7:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "911:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "898:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "898:23:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "923:2:3",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "894:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "894:32:3"
															},
															"nodeType": "YulIf",
															"src": "891:119:3"
														},
														{
															"nodeType": "YulBlock",
															"src": "1020:117:3",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1035:15:3",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1049:1:3",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1039:6:3",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1064:63:3",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1099:9:3"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1110:6:3"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1095:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1095:22:3"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1119:7:3"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1074:20:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1074:53:3"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1064:6:3"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1147:118:3",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1162:16:3",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1176:2:3",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1166:6:3",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1192:63:3",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1227:9:3"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1238:6:3"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1223:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1223:22:3"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1247:7:3"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1202:20:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1202:53:3"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1192:6:3"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1275:118:3",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1290:16:3",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1304:2:3",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1294:6:3",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1320:63:3",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1355:9:3"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1366:6:3"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1351:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1351:22:3"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1375:7:3"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1330:20:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1330:53:3"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "1320:6:3"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "835:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "846:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "858:6:3",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "866:6:3",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "874:6:3",
														"type": ""
													}
												],
												"src": "781:619:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1483:274:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1529:83:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1531:77:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1531:79:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1531:79:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1504:7:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1513:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1500:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1500:23:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1525:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1496:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1496:32:3"
															},
															"nodeType": "YulIf",
															"src": "1493:119:3"
														},
														{
															"nodeType": "YulBlock",
															"src": "1622:128:3",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1637:15:3",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1651:1:3",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1641:6:3",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1666:74:3",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1712:9:3"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1723:6:3"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1708:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1708:22:3"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1732:7:3"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1676:31:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1676:64:3"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1666:6:3"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1453:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1464:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1476:6:3",
														"type": ""
													}
												],
												"src": "1406:351:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1828:53:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1845:3:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1868:5:3"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1850:17:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1850:24:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1838:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1838:37:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1838:37:3"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1816:5:3",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1823:3:3",
														"type": ""
													}
												],
												"src": "1763:118:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1952:53:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1969:3:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1992:5:3"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1974:17:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1974:24:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1962:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1962:37:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1962:37:3"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1940:5:3",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1947:3:3",
														"type": ""
													}
												],
												"src": "1887:118:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2109:124:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2119:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2131:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2142:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2127:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2127:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2119:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2199:6:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2212:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2223:1:3",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2208:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2208:17:3"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2155:43:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2155:71:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2155:71:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2081:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2093:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2104:4:3",
														"type": ""
													}
												],
												"src": "2011:222:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2393:288:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2403:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2415:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2426:2:3",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2411:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2411:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2403:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2483:6:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2496:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2507:1:3",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2492:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2492:17:3"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2439:43:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2439:71:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2439:71:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "2564:6:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2577:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2588:2:3",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2573:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2573:18:3"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2520:43:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2520:72:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2520:72:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "2646:6:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2659:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2670:2:3",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2655:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2655:18:3"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2602:43:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2602:72:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2602:72:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2349:9:3",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2361:6:3",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2369:6:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2377:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2388:4:3",
														"type": ""
													}
												],
												"src": "2239:442:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2785:124:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2795:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2807:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2818:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2803:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2803:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2795:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2875:6:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2888:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2899:1:3",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2884:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2884:17:3"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2831:43:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2831:71:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2831:71:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2757:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2769:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2780:4:3",
														"type": ""
													}
												],
												"src": "2687:222:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2955:35:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2965:19:3",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2981:2:3",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2975:5:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2975:9:3"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "2965:6:3"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "2948:6:3",
														"type": ""
													}
												],
												"src": "2915:75:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3041:51:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3051:35:3",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3080:5:3"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "3062:17:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3062:24:3"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3051:7:3"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3023:5:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3033:7:3",
														"type": ""
													}
												],
												"src": "2996:96:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3143:81:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3153:65:3",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3168:5:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3175:42:3",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3164:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3164:54:3"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3153:7:3"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3125:5:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3135:7:3",
														"type": ""
													}
												],
												"src": "3098:126:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3275:32:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3285:16:3",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3296:5:3"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3285:7:3"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3257:5:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3267:7:3",
														"type": ""
													}
												],
												"src": "3230:77:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3402:28:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3419:1:3",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3422:1:3",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3412:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3412:12:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3412:12:3"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "3313:117:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3525:28:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3542:1:3",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3545:1:3",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3535:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3535:12:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3535:12:3"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "3436:117:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3602:79:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3659:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3668:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3671:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3661:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3661:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3661:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3625:5:3"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3650:5:3"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "3632:17:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3632:24:3"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3622:2:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3622:35:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3615:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3615:43:3"
															},
															"nodeType": "YulIf",
															"src": "3612:63:3"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3595:5:3",
														"type": ""
													}
												],
												"src": "3559:122:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3730:79:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3787:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3796:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3799:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3789:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3789:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3789:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3753:5:3"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3778:5:3"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "3760:17:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3760:24:3"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3750:2:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3750:35:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3743:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3743:43:3"
															},
															"nodeType": "YulIf",
															"src": "3740:63:3"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3723:5:3",
														"type": ""
													}
												],
												"src": "3687:122:3"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 3,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100365760003560e01c80635b4f65bf1461003b578063fec8a8a51461006b575b600080fd5b6100556004803603810190610050919061020d565b610087565b604051610062919061032a565b60405180910390f35b6100856004803603810190610080919061023a565b61013a565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016100e391906102d8565b60206040518083038186803b1580156100fb57600080fd5b505afa15801561010f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610133919061028d565b9050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e8484846040518463ffffffff1660e01b8152600401610197939291906102f3565b600060405180830381600087803b1580156101b157600080fd5b505af11580156101c5573d6000803e3d6000fd5b50505050505050565b6000813590506101dd81610386565b92915050565b6000813590506101f28161039d565b92915050565b6000815190506102078161039d565b92915050565b60006020828403121561022357610222610381565b5b6000610231848285016101ce565b91505092915050565b60008060006060848603121561025357610252610381565b5b6000610261868287016101ce565b9350506020610272868287016101ce565b9250506040610283868287016101e3565b9150509250925092565b6000602082840312156102a3576102a2610381565b5b60006102b1848285016101f8565b91505092915050565b6102c381610345565b82525050565b6102d281610377565b82525050565b60006020820190506102ed60008301846102ba565b92915050565b600060608201905061030860008301866102ba565b61031560208301856102ba565b61032260408301846102c9565b949350505050565b600060208201905061033f60008301846102c9565b92915050565b600061035082610357565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b61038f81610345565b811461039a57600080fd5b50565b6103a681610377565b81146103b157600080fd5b5056fea2646970667358221220708c51192a04e8d02f374613a559d0c34956c06367719011d852a19c266924c064736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5B4F65BF EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xFEC8A8A5 EQ PUSH2 0x6B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x55 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x20D JUMP JUMPDEST PUSH2 0x87 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x62 SWAP2 SWAP1 PUSH2 0x32A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x85 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x80 SWAP2 SWAP1 PUSH2 0x23A JUMP JUMPDEST PUSH2 0x13A JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x2D8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x10F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x133 SWAP2 SWAP1 PUSH2 0x28D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42842E0E DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x197 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2F3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1DD DUP2 PUSH2 0x386 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1F2 DUP2 PUSH2 0x39D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x207 DUP2 PUSH2 0x39D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x223 JUMPI PUSH2 0x222 PUSH2 0x381 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x231 DUP5 DUP3 DUP6 ADD PUSH2 0x1CE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x253 JUMPI PUSH2 0x252 PUSH2 0x381 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x261 DUP7 DUP3 DUP8 ADD PUSH2 0x1CE JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x272 DUP7 DUP3 DUP8 ADD PUSH2 0x1CE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x283 DUP7 DUP3 DUP8 ADD PUSH2 0x1E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A3 JUMPI PUSH2 0x2A2 PUSH2 0x381 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2B1 DUP5 DUP3 DUP6 ADD PUSH2 0x1F8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2C3 DUP2 PUSH2 0x345 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2D2 DUP2 PUSH2 0x377 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2ED PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2BA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x308 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2BA JUMP JUMPDEST PUSH2 0x315 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2BA JUMP JUMPDEST PUSH2 0x322 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2C9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x33F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2C9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x350 DUP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38F DUP2 PUSH2 0x345 JUMP JUMPDEST DUP2 EQ PUSH2 0x39A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x3A6 DUP2 PUSH2 0x377 JUMP JUMPDEST DUP2 EQ PUSH2 0x3B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH17 0x8C51192A04E8D02F374613A559D0C34956 0xC0 PUSH4 0x67719011 0xD8 MSTORE LOG1 SWAP13 0x26 PUSH10 0x24C064736F6C63430008 SMOD STOP CALLER ",
							"sourceMap": "17638:554:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17861:122;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;18052:138;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;17861:122;17922:15;17955:4;;;;;;;;;;;:14;;;17970:5;17955:21;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;17948:28;;17861:122;;;:::o;18052:138::-;18143:4;;;;;;;;;;:21;;;18165:4;18171:2;18175:7;18143:40;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18052:138;;;:::o;7:139:3:-;53:5;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;7:139;;;;:::o;152:::-;198:5;236:6;223:20;214:29;;252:33;279:5;252:33;:::i;:::-;152:139;;;;:::o;297:143::-;354:5;385:6;379:13;370:22;;401:33;428:5;401:33;:::i;:::-;297:143;;;;:::o;446:329::-;505:6;554:2;542:9;533:7;529:23;525:32;522:119;;;560:79;;:::i;:::-;522:119;680:1;705:53;750:7;741:6;730:9;726:22;705:53;:::i;:::-;695:63;;651:117;446:329;;;;:::o;781:619::-;858:6;866;874;923:2;911:9;902:7;898:23;894:32;891:119;;;929:79;;:::i;:::-;891:119;1049:1;1074:53;1119:7;1110:6;1099:9;1095:22;1074:53;:::i;:::-;1064:63;;1020:117;1176:2;1202:53;1247:7;1238:6;1227:9;1223:22;1202:53;:::i;:::-;1192:63;;1147:118;1304:2;1330:53;1375:7;1366:6;1355:9;1351:22;1330:53;:::i;:::-;1320:63;;1275:118;781:619;;;;;:::o;1406:351::-;1476:6;1525:2;1513:9;1504:7;1500:23;1496:32;1493:119;;;1531:79;;:::i;:::-;1493:119;1651:1;1676:64;1732:7;1723:6;1712:9;1708:22;1676:64;:::i;:::-;1666:74;;1622:128;1406:351;;;;:::o;1763:118::-;1850:24;1868:5;1850:24;:::i;:::-;1845:3;1838:37;1763:118;;:::o;1887:::-;1974:24;1992:5;1974:24;:::i;:::-;1969:3;1962:37;1887:118;;:::o;2011:222::-;2104:4;2142:2;2131:9;2127:18;2119:26;;2155:71;2223:1;2212:9;2208:17;2199:6;2155:71;:::i;:::-;2011:222;;;;:::o;2239:442::-;2388:4;2426:2;2415:9;2411:18;2403:26;;2439:71;2507:1;2496:9;2492:17;2483:6;2439:71;:::i;:::-;2520:72;2588:2;2577:9;2573:18;2564:6;2520:72;:::i;:::-;2602;2670:2;2659:9;2655:18;2646:6;2602:72;:::i;:::-;2239:442;;;;;;:::o;2687:222::-;2780:4;2818:2;2807:9;2803:18;2795:26;;2831:71;2899:1;2888:9;2884:17;2875:6;2831:71;:::i;:::-;2687:222;;;;:::o;2996:96::-;3033:7;3062:24;3080:5;3062:24;:::i;:::-;3051:35;;2996:96;;;:::o;3098:126::-;3135:7;3175:42;3168:5;3164:54;3153:65;;3098:126;;;:::o;3230:77::-;3267:7;3296:5;3285:16;;3230:77;;;:::o;3436:117::-;3545:1;3542;3535:12;3559:122;3632:24;3650:5;3632:24;:::i;:::-;3625:5;3622:35;3612:63;;3671:1;3668;3661:12;3612:63;3559:122;:::o;3687:::-;3760:24;3778:5;3760:24;:::i;:::-;3753:5;3750:35;3740:63;;3799:1;3796;3789:12;3740:63;3687:122;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "200400",
								"executionCost": "24512",
								"totalCost": "224912"
							},
							"external": {
								"balanceOfBAYC(address)": "infinite",
								"safeTransferFromBAYC(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 17638,
									"end": 18192,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 17638,
									"end": 18192,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 17638,
									"end": 18192,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 17752,
									"end": 17794,
									"name": "PUSH",
									"source": 2,
									"value": "BC4CA0EDA7647A8AB7C2061C2E118A18A936F13D"
								},
								{
									"begin": 17729,
									"end": 17795,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 17729,
									"end": 17795,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 17729,
									"end": 17795,
									"name": "PUSH",
									"source": 2,
									"value": "100"
								},
								{
									"begin": 17729,
									"end": 17795,
									"name": "EXP",
									"source": 2
								},
								{
									"begin": 17729,
									"end": 17795,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 17729,
									"end": 17795,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 17729,
									"end": 17795,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 17729,
									"end": 17795,
									"name": "PUSH",
									"source": 2,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 17729,
									"end": 17795,
									"name": "MUL",
									"source": 2
								},
								{
									"begin": 17729,
									"end": 17795,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 17729,
									"end": 17795,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 17729,
									"end": 17795,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 17729,
									"end": 17795,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 17729,
									"end": 17795,
									"name": "PUSH",
									"source": 2,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 17729,
									"end": 17795,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 17729,
									"end": 17795,
									"name": "MUL",
									"source": 2
								},
								{
									"begin": 17729,
									"end": 17795,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 17729,
									"end": 17795,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 17729,
									"end": 17795,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 17729,
									"end": 17795,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 17638,
									"end": 18192,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 17638,
									"end": 18192,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 17638,
									"end": 18192,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 17638,
									"end": 18192,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 17638,
									"end": 18192,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 17638,
									"end": 18192,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 17638,
									"end": 18192,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 17638,
									"end": 18192,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 17638,
									"end": 18192,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 17638,
									"end": 18192,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 17638,
									"end": 18192,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 17638,
									"end": 18192,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 17638,
									"end": 18192,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 17638,
									"end": 18192,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 17638,
									"end": 18192,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 17638,
									"end": 18192,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 17638,
									"end": 18192,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 17638,
									"end": 18192,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220708c51192a04e8d02f374613a559d0c34956c06367719011d852a19c266924c064736f6c63430008070033",
									".code": [
										{
											"begin": 17638,
											"end": 18192,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "PUSH",
											"source": 2,
											"value": "5B4F65BF"
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "PUSH",
											"source": 2,
											"value": "FEC8A8A5"
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17638,
											"end": 18192,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17922,
											"end": 17937,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17955,
											"end": 17959,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17959,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17955,
											"end": 17959,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17959,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17959,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17959,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 17955,
											"end": 17959,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17959,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17959,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17959,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17955,
											"end": 17959,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17969,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17955,
											"end": 17969,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17969,
											"name": "PUSH",
											"source": 2,
											"value": "70A08231"
										},
										{
											"begin": 17970,
											"end": 17975,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "tag",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 17955,
											"end": 17976,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17948,
											"end": 17976,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17948,
											"end": 17976,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 17861,
											"end": 17983,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18147,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 18143,
											"end": 18147,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18147,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18147,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18147,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 18143,
											"end": 18147,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18147,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18147,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18147,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 18143,
											"end": 18147,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18164,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 18143,
											"end": 18164,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18164,
											"name": "PUSH",
											"source": 2,
											"value": "42842E0E"
										},
										{
											"begin": 18165,
											"end": 18169,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 18171,
											"end": 18173,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 18175,
											"end": 18182,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "tag",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "tag",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 18143,
											"end": 18183,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 18052,
											"end": 18190,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "tag",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 53,
											"end": 58,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 91,
											"end": 97,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 78,
											"end": 98,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 69,
											"end": 98,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 69,
											"end": 98,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 134,
											"end": 139,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "tag",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7,
											"end": 146,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 7,
											"end": 146,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7,
											"end": 146,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7,
											"end": 146,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 152,
											"end": 291,
											"name": "tag",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 152,
											"end": 291,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 198,
											"end": 203,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 236,
											"end": 242,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 223,
											"end": 243,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 214,
											"end": 243,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 214,
											"end": 243,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 252,
											"end": 285,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 279,
											"end": 284,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 252,
											"end": 285,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 252,
											"end": 285,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 252,
											"end": 285,
											"name": "tag",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 252,
											"end": 285,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 152,
											"end": 291,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 152,
											"end": 291,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 152,
											"end": 291,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 152,
											"end": 291,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 152,
											"end": 291,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 297,
											"end": 440,
											"name": "tag",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 297,
											"end": 440,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 354,
											"end": 359,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 385,
											"end": 391,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 379,
											"end": 392,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 370,
											"end": 392,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 370,
											"end": 392,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 401,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 428,
											"end": 433,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 401,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 401,
											"end": 434,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 401,
											"end": 434,
											"name": "tag",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 401,
											"end": 434,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 297,
											"end": 440,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 297,
											"end": 440,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 297,
											"end": 440,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 297,
											"end": 440,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 297,
											"end": 440,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 446,
											"end": 775,
											"name": "tag",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 446,
											"end": 775,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 505,
											"end": 511,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 554,
											"end": 556,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 542,
											"end": 551,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 533,
											"end": 540,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 529,
											"end": 552,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 525,
											"end": 557,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 522,
											"end": 641,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 522,
											"end": 641,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 522,
											"end": 641,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 560,
											"end": 639,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "43"
										},
										{
											"begin": 560,
											"end": 639,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 560,
											"end": 639,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 560,
											"end": 639,
											"name": "tag",
											"source": 3,
											"value": "43"
										},
										{
											"begin": 560,
											"end": 639,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 522,
											"end": 641,
											"name": "tag",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 522,
											"end": 641,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 680,
											"end": 681,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 705,
											"end": 758,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "45"
										},
										{
											"begin": 750,
											"end": 757,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 741,
											"end": 747,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 730,
											"end": 739,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 726,
											"end": 748,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 705,
											"end": 758,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 705,
											"end": 758,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 705,
											"end": 758,
											"name": "tag",
											"source": 3,
											"value": "45"
										},
										{
											"begin": 705,
											"end": 758,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 695,
											"end": 758,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 695,
											"end": 758,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 651,
											"end": 768,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 446,
											"end": 775,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 446,
											"end": 775,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 446,
											"end": 775,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 446,
											"end": 775,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 446,
											"end": 775,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 781,
											"end": 1400,
											"name": "tag",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 781,
											"end": 1400,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 858,
											"end": 864,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 866,
											"end": 872,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 874,
											"end": 880,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 923,
											"end": 925,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 911,
											"end": 920,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 902,
											"end": 909,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 898,
											"end": 921,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 894,
											"end": 926,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 891,
											"end": 1010,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 891,
											"end": 1010,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 891,
											"end": 1010,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 929,
											"end": 1008,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 929,
											"end": 1008,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 929,
											"end": 1008,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 929,
											"end": 1008,
											"name": "tag",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 929,
											"end": 1008,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 891,
											"end": 1010,
											"name": "tag",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 891,
											"end": 1010,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1049,
											"end": 1050,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1074,
											"end": 1127,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 1119,
											"end": 1126,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1110,
											"end": 1116,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1099,
											"end": 1108,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 1095,
											"end": 1117,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1074,
											"end": 1127,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 1074,
											"end": 1127,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1074,
											"end": 1127,
											"name": "tag",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 1074,
											"end": 1127,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1064,
											"end": 1127,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1064,
											"end": 1127,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1020,
											"end": 1137,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1176,
											"end": 1178,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1202,
											"end": 1255,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 1247,
											"end": 1254,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1238,
											"end": 1244,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1227,
											"end": 1236,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 1223,
											"end": 1245,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1202,
											"end": 1255,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 1202,
											"end": 1255,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1202,
											"end": 1255,
											"name": "tag",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 1202,
											"end": 1255,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1192,
											"end": 1255,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1192,
											"end": 1255,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1147,
											"end": 1265,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1304,
											"end": 1306,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1330,
											"end": 1383,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 1375,
											"end": 1382,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1366,
											"end": 1372,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1355,
											"end": 1364,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 1351,
											"end": 1373,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1330,
											"end": 1383,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 1330,
											"end": 1383,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1330,
											"end": 1383,
											"name": "tag",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 1330,
											"end": 1383,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1320,
											"end": 1383,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1320,
											"end": 1383,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1275,
											"end": 1393,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 781,
											"end": 1400,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 781,
											"end": 1400,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 781,
											"end": 1400,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 781,
											"end": 1400,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 781,
											"end": 1400,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 781,
											"end": 1400,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1406,
											"end": 1757,
											"name": "tag",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 1406,
											"end": 1757,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1476,
											"end": 1482,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1525,
											"end": 1527,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1513,
											"end": 1522,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1504,
											"end": 1511,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1500,
											"end": 1523,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1496,
											"end": 1528,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 1493,
											"end": 1612,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1493,
											"end": 1612,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 1493,
											"end": 1612,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1531,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 1531,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 1531,
											"end": 1610,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1531,
											"end": 1610,
											"name": "tag",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 1531,
											"end": 1610,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1493,
											"end": 1612,
											"name": "tag",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 1493,
											"end": 1612,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1651,
											"end": 1652,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1676,
											"end": 1740,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "55"
										},
										{
											"begin": 1732,
											"end": 1739,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1723,
											"end": 1729,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1712,
											"end": 1721,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1708,
											"end": 1730,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1676,
											"end": 1740,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 1676,
											"end": 1740,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1676,
											"end": 1740,
											"name": "tag",
											"source": 3,
											"value": "55"
										},
										{
											"begin": 1676,
											"end": 1740,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1666,
											"end": 1740,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1666,
											"end": 1740,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1622,
											"end": 1750,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1406,
											"end": 1757,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1406,
											"end": 1757,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1406,
											"end": 1757,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1406,
											"end": 1757,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1406,
											"end": 1757,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1763,
											"end": 1881,
											"name": "tag",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 1763,
											"end": 1881,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1850,
											"end": 1874,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 1868,
											"end": 1873,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1850,
											"end": 1874,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 1850,
											"end": 1874,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1850,
											"end": 1874,
											"name": "tag",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 1850,
											"end": 1874,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1845,
											"end": 1848,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1838,
											"end": 1875,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1763,
											"end": 1881,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1763,
											"end": 1881,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1763,
											"end": 1881,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1887,
											"end": 2005,
											"name": "tag",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 1887,
											"end": 2005,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1974,
											"end": 1998,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "62"
										},
										{
											"begin": 1992,
											"end": 1997,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1974,
											"end": 1998,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "63"
										},
										{
											"begin": 1974,
											"end": 1998,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1974,
											"end": 1998,
											"name": "tag",
											"source": 3,
											"value": "62"
										},
										{
											"begin": 1974,
											"end": 1998,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1969,
											"end": 1972,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1962,
											"end": 1999,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1887,
											"end": 2005,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1887,
											"end": 2005,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1887,
											"end": 2005,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2011,
											"end": 2233,
											"name": "tag",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 2011,
											"end": 2233,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2104,
											"end": 2108,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2142,
											"end": 2144,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2131,
											"end": 2140,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2127,
											"end": 2145,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2119,
											"end": 2145,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2119,
											"end": 2145,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2155,
											"end": 2226,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 2223,
											"end": 2224,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2212,
											"end": 2221,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2208,
											"end": 2225,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2199,
											"end": 2205,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2155,
											"end": 2226,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 2155,
											"end": 2226,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2155,
											"end": 2226,
											"name": "tag",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 2155,
											"end": 2226,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2011,
											"end": 2233,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2011,
											"end": 2233,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2011,
											"end": 2233,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2011,
											"end": 2233,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2011,
											"end": 2233,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2239,
											"end": 2681,
											"name": "tag",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 2239,
											"end": 2681,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2388,
											"end": 2392,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2426,
											"end": 2428,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2415,
											"end": 2424,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2411,
											"end": 2429,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2403,
											"end": 2429,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2403,
											"end": 2429,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2439,
											"end": 2510,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 2507,
											"end": 2508,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2496,
											"end": 2505,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2492,
											"end": 2509,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2483,
											"end": 2489,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 2439,
											"end": 2510,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 2439,
											"end": 2510,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2439,
											"end": 2510,
											"name": "tag",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 2439,
											"end": 2510,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2520,
											"end": 2592,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "68"
										},
										{
											"begin": 2588,
											"end": 2590,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2577,
											"end": 2586,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2573,
											"end": 2591,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2564,
											"end": 2570,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 2520,
											"end": 2592,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 2520,
											"end": 2592,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2520,
											"end": 2592,
											"name": "tag",
											"source": 3,
											"value": "68"
										},
										{
											"begin": 2520,
											"end": 2592,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2602,
											"end": 2674,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "69"
										},
										{
											"begin": 2670,
											"end": 2672,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2659,
											"end": 2668,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2655,
											"end": 2673,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2646,
											"end": 2652,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2602,
											"end": 2674,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2602,
											"end": 2674,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2602,
											"end": 2674,
											"name": "tag",
											"source": 3,
											"value": "69"
										},
										{
											"begin": 2602,
											"end": 2674,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2239,
											"end": 2681,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 2239,
											"end": 2681,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 2239,
											"end": 2681,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2239,
											"end": 2681,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2239,
											"end": 2681,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2239,
											"end": 2681,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2239,
											"end": 2681,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2687,
											"end": 2909,
											"name": "tag",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 2687,
											"end": 2909,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2780,
											"end": 2784,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2818,
											"end": 2820,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2807,
											"end": 2816,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2803,
											"end": 2821,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2795,
											"end": 2821,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2795,
											"end": 2821,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2831,
											"end": 2902,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "71"
										},
										{
											"begin": 2899,
											"end": 2900,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2888,
											"end": 2897,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2884,
											"end": 2901,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2875,
											"end": 2881,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2831,
											"end": 2902,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2831,
											"end": 2902,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2831,
											"end": 2902,
											"name": "tag",
											"source": 3,
											"value": "71"
										},
										{
											"begin": 2831,
											"end": 2902,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2687,
											"end": 2909,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2687,
											"end": 2909,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2687,
											"end": 2909,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2687,
											"end": 2909,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2687,
											"end": 2909,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2996,
											"end": 3092,
											"name": "tag",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 2996,
											"end": 3092,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3033,
											"end": 3040,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3062,
											"end": 3086,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "75"
										},
										{
											"begin": 3080,
											"end": 3085,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3062,
											"end": 3086,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "76"
										},
										{
											"begin": 3062,
											"end": 3086,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3062,
											"end": 3086,
											"name": "tag",
											"source": 3,
											"value": "75"
										},
										{
											"begin": 3062,
											"end": 3086,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2996,
											"end": 3092,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2996,
											"end": 3092,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2996,
											"end": 3092,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2996,
											"end": 3092,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3098,
											"end": 3224,
											"name": "tag",
											"source": 3,
											"value": "76"
										},
										{
											"begin": 3098,
											"end": 3224,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3135,
											"end": 3142,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3175,
											"end": 3217,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3168,
											"end": 3173,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3164,
											"end": 3218,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3153,
											"end": 3218,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3153,
											"end": 3218,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3098,
											"end": 3224,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3098,
											"end": 3224,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3098,
											"end": 3224,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3098,
											"end": 3224,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3230,
											"end": 3307,
											"name": "tag",
											"source": 3,
											"value": "63"
										},
										{
											"begin": 3230,
											"end": 3307,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3267,
											"end": 3274,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3296,
											"end": 3301,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3285,
											"end": 3301,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3285,
											"end": 3301,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3230,
											"end": 3307,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3230,
											"end": 3307,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3230,
											"end": 3307,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3230,
											"end": 3307,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3436,
											"end": 3553,
											"name": "tag",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 3436,
											"end": 3553,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3545,
											"end": 3546,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3542,
											"end": 3543,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3535,
											"end": 3547,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 3559,
											"end": 3681,
											"name": "tag",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 3559,
											"end": 3681,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3632,
											"end": 3656,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "83"
										},
										{
											"begin": 3650,
											"end": 3655,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3632,
											"end": 3656,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 3632,
											"end": 3656,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3632,
											"end": 3656,
											"name": "tag",
											"source": 3,
											"value": "83"
										},
										{
											"begin": 3632,
											"end": 3656,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3625,
											"end": 3630,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3622,
											"end": 3657,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 3612,
											"end": 3675,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "84"
										},
										{
											"begin": 3612,
											"end": 3675,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3671,
											"end": 3672,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3668,
											"end": 3669,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3661,
											"end": 3673,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 3612,
											"end": 3675,
											"name": "tag",
											"source": 3,
											"value": "84"
										},
										{
											"begin": 3612,
											"end": 3675,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3559,
											"end": 3681,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3559,
											"end": 3681,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3687,
											"end": 3809,
											"name": "tag",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 3687,
											"end": 3809,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3760,
											"end": 3784,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "86"
										},
										{
											"begin": 3778,
											"end": 3783,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3760,
											"end": 3784,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "63"
										},
										{
											"begin": 3760,
											"end": 3784,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3760,
											"end": 3784,
											"name": "tag",
											"source": 3,
											"value": "86"
										},
										{
											"begin": 3760,
											"end": 3784,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3753,
											"end": 3758,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3750,
											"end": 3785,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 3740,
											"end": 3803,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "87"
										},
										{
											"begin": 3740,
											"end": 3803,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3799,
											"end": 3800,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3796,
											"end": 3797,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3789,
											"end": 3801,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 3740,
											"end": 3803,
											"name": "tag",
											"source": 3,
											"value": "87"
										},
										{
											"begin": 3740,
											"end": 3803,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3687,
											"end": 3809,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3687,
											"end": 3809,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"balanceOfBAYC(address)": "5b4f65bf",
							"safeTransferFromBAYC(address,address,uint256)": "fec8a8a5"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOfBAYC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFromBAYC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"HelloWord.sol\":\"interactBAYC\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://20a97f891d06f0fe91560ea1a142aaa26fdd22bed1b51606b7d48f670deeb50f\",\"dweb:/ipfs/QmTbCtZKChpaX5H2iRiTDMcSz29GSLCpTCDgJpcMR4wg8x\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"HelloWord.sol\":{\"keccak256\":\"0xe55133007d4f7ffeb84f43f2bd5c04c744fef3c4d63f050aedbb8a6a4be86aae\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://115920c599ff23e0a2aa3eac271c6a54d6e3b4bcba9b0e2f45697319b0191c5a\",\"dweb:/ipfs/QmPEMySTm9xiT6Pw6KXZitpBudwp17g4RgYUGwZwkn6jUq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 136,
								"contract": "HelloWord.sol:interactBAYC",
								"label": "BAYC",
								"offset": 0,
								"slot": "0",
								"type": "t_contract(IERC721)115"
							}
						],
						"types": {
							"t_contract(IERC721)115": {
								"encoding": "inplace",
								"label": "contract IERC721",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							127
						],
						"IERC721": [
							115
						]
					},
					"id": 116,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 116,
							"sourceUnit": 128,
							"src": "133:47:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 127,
										"src": "271:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "271:7:0"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "182:67:0",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 115,
							"linearizedBaseContracts": [
								115,
								127
							],
							"name": "IERC721",
							"nameLocation": "260:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 6,
										"nodeType": "StructuredDocumentation",
										"src": "285:88:0",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"id": 14,
									"name": "Transfer",
									"nameLocation": "384:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 8,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "409:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "393:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 7,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "393:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 10,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "431:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "415:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 9,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "451:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "435:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 11,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "435:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "392:67:0"
									},
									"src": "378:82:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 15,
										"nodeType": "StructuredDocumentation",
										"src": "466:94:0",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"id": 23,
									"name": "Approval",
									"nameLocation": "571:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 17,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "596:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "580:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 16,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 19,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "619:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "603:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 18,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 21,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "645:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "629:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 20,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "629:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "579:74:0"
									},
									"src": "565:89:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "660:117:0",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"id": 32,
									"name": "ApprovalForAll",
									"nameLocation": "788:14:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 26,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "819:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "803:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 25,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 28,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "842:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "826:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 27,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 30,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "857:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "852:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 29,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "852:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:64:0"
									},
									"src": "782:85:0"
								},
								{
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "873:76:0",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 40,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "963:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "981:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "973:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:15:0"
									},
									"returnParameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1019:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1011:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 37,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1010:17:0"
									},
									"scope": 115,
									"src": "954:74:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1034:131:0",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 48,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1179:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 44,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 43,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1195:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "1187:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 42,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:17:0"
									},
									"returnParameters": {
										"id": 47,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 46,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1235:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "1227:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 45,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1226:15:0"
									},
									"scope": 115,
									"src": "1170:72:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 49,
										"nodeType": "StructuredDocumentation",
										"src": "1248:556:0",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 60,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1818:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1852:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1844:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 50,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1844:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1874:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1866:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 52,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1866:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1894:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1886:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 54,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1886:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1926:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1911:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 56,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1911:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1834:102:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1945:0:0"
									},
									"scope": 115,
									"src": "1809:137:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1952:687:0",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 70,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2653:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 68,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2687:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "2679:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2709:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "2701:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 64,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2729:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "2721:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 66,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2721:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2669:73:0"
									},
									"returnParameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2751:0:0"
									},
									"scope": 115,
									"src": "2644:108:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 71,
										"nodeType": "StructuredDocumentation",
										"src": "2758:504:0",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 80,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3276:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 73,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3306:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "3298:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 72,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3298:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3328:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "3320:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 74,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3320:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 77,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3348:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "3340:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 76,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3340:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3288:73:0"
									},
									"returnParameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3370:0:0"
									},
									"scope": 115,
									"src": "3267:104:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 81,
										"nodeType": "StructuredDocumentation",
										"src": "3377:452:0",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 88,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3843:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3859:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 88,
												"src": "3851:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 82,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3851:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3871:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 88,
												"src": "3863:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 84,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3863:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3850:29:0"
									},
									"returnParameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3888:0:0"
									},
									"scope": 115,
									"src": "3834:55:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 89,
										"nodeType": "StructuredDocumentation",
										"src": "3895:309:0",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 96,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4218:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 94,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 91,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4244:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 96,
												"src": "4236:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 90,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4236:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "_approved",
												"nameLocation": "4259:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 96,
												"src": "4254:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 92,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4254:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4235:34:0"
									},
									"returnParameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4278:0:0"
									},
									"scope": 115,
									"src": "4209:70:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 97,
										"nodeType": "StructuredDocumentation",
										"src": "4285:139:0",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 104,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4438:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4458:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "4450:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 98,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4450:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4449:17:0"
									},
									"returnParameters": {
										"id": 103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 102,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4498:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "4490:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 101,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4490:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4489:18:0"
									},
									"scope": 115,
									"src": "4429:79:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 105,
										"nodeType": "StructuredDocumentation",
										"src": "4514:138:0",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 114,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4666:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4691:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 114,
												"src": "4683:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4683:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 109,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4706:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 114,
												"src": "4698:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 108,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4698:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4682:33:0"
									},
									"returnParameters": {
										"id": 113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 112,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 114,
												"src": "4739:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 111,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4739:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4738:6:0"
									},
									"scope": 115,
									"src": "4657:88:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 116,
							"src": "250:4497:0",
							"usedErrors": []
						}
					],
					"src": "108:4640:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							127
						]
					},
					"id": 128,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 117,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 118,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:1",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 127,
							"linearizedBaseContracts": [
								127
							],
							"name": "IERC165",
							"nameLocation": "415:7:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 119,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:1",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 126,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "801:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 120,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:1"
									},
									"returnParameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "844:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 123,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:1"
									},
									"scope": 127,
									"src": "774:76:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 128,
							"src": "405:447:1",
							"usedErrors": []
						}
					],
					"src": "100:753:1"
				},
				"id": 1
			},
			"HelloWord.sol": {
				"ast": {
					"absolutePath": "HelloWord.sol",
					"exportedSymbols": {
						"IERC165": [
							127
						],
						"IERC721": [
							115
						],
						"interactBAYC": [
							168
						]
					},
					"id": 169,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 129,
							"literals": [
								"solidity",
								"0.8",
								".7"
							],
							"nodeType": "PragmaDirective",
							"src": "32:22:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 130,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 169,
							"sourceUnit": 116,
							"src": "55:58:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 168,
							"linearizedBaseContracts": [
								168
							],
							"name": "interactBAYC",
							"nameLocation": "17647:12:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 136,
									"mutability": "mutable",
									"name": "BAYC",
									"nameLocation": "17737:4:2",
									"nodeType": "VariableDeclaration",
									"scope": 168,
									"src": "17729:66:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC721_$115",
										"typeString": "contract IERC721"
									},
									"typeName": {
										"id": 132,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 131,
											"name": "IERC721",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 115,
											"src": "17729:7:2"
										},
										"referencedDeclaration": 115,
										"src": "17729:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721_$115",
											"typeString": "contract IERC721"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "307842433443413045644137363437413861423743323036316332453131384131386139333666313344",
												"id": 134,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "17752:42:2",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"value": "0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											],
											"id": 133,
											"name": "IERC721",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 115,
											"src": "17744:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_type$_t_contract$_IERC721_$115_$",
												"typeString": "type(contract IERC721)"
											}
										},
										"id": 135,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "typeConversion",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "17744:51:2",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721_$115",
											"typeString": "contract IERC721"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 148,
										"nodeType": "Block",
										"src": "17938:45:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 145,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 138,
															"src": "17970:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 143,
															"name": "BAYC",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 136,
															"src": "17955:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721_$115",
																"typeString": "contract IERC721"
															}
														},
														"id": 144,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 40,
														"src": "17955:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 146,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17955:21:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 142,
												"id": 147,
												"nodeType": "Return",
												"src": "17948:28:2"
											}
										]
									},
									"functionSelector": "5b4f65bf",
									"id": 149,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOfBAYC",
									"nameLocation": "17870:13:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 138,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "17892:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "17884:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 137,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17884:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17883:15:2"
									},
									"returnParameters": {
										"id": 142,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 141,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "17930:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "17922:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 140,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17922:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17921:17:2"
									},
									"scope": 168,
									"src": "17861:122:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 166,
										"nodeType": "Block",
										"src": "18133:57:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 161,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 151,
															"src": "18165:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 162,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 153,
															"src": "18171:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 163,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 155,
															"src": "18175:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 158,
															"name": "BAYC",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 136,
															"src": "18143:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721_$115",
																"typeString": "contract IERC721"
															}
														},
														"id": 160,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 70,
														"src": "18143:21:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256) external"
														}
													},
													"id": 164,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18143:40:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 165,
												"nodeType": "ExpressionStatement",
												"src": "18143:40:2"
											}
										]
									},
									"functionSelector": "fec8a8a5",
									"id": 167,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFromBAYC",
									"nameLocation": "18061:20:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "18090:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "18082:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18082:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "18104:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "18096:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 152,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18096:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "18116:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "18108:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 154,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18108:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18081:43:2"
									},
									"returnParameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18133:0:2"
									},
									"scope": 168,
									"src": "18052:138:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 169,
							"src": "17638:554:2",
							"usedErrors": []
						}
					],
					"src": "32:27880:2"
				},
				"id": 2
			}
		}
	}
}