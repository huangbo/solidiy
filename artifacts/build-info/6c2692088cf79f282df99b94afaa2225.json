{
	"id": "6c2692088cf79f282df99b94afaa2225",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"HelloWord.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\n// contract ValueTypes {\n//     string public myString = \"hello world\";\n//     bool public b = true;\n//     uint public u = 123; \n//     int public i = -123;\n//     int public minInt = type(int).min;\n//     int public maxInt = type(int).max;\n//     address public addr = 0xC4CB0f670DFdC7c28F49F63feAacb2E10BAFdeC7;\n// }\n\n// contract FunctionIntro {\n//     function add(uint x, uint y) external pure returns (uint) {\n//         return x + y;\n//     }\n// }\n\n// external 外部函数，调用需要通过this\n// contract externalTest {\n//     uint8 id;\n//     function setId(uint8 newId) public {\n//         id = newId;\n//     }\n//     function getId() public view returns (uint8) {\n//         return this.getIdByexternal();\n//     }\n\n//     function getIdByexternal() external view returns(uint8) {\n//         return id;\n//     }\n// }\n\n// contract subExternalTest is externalTest {\n//     function getexternalId() public view returns(uint8) {\n//         return this.getIdByexternal();\n//     }\n// }\n\n// internal 内部函数，不使用this\n// contract internalTest {\n//     uint8 internal id;\n//     function setId(uint8 newId) public {\n//         id = newId;\n//     }\n//     function getId() public view returns (uint8) {\n//         return getIdByinternal();\n//     }\n\n//     function getIdByinternal() internal view returns(uint8) {\n//         return id;\n//     }\n// }\n\n// contract subinternalTest is internalTest {\n//     function getsubId() public view returns(uint8) {\n//         return id;\n//     }\n\n//     function getsubexternalId() public view returns(uint8) {\n//         return getIdByinternal();\n//     }\n// }\n\n\n// private 只能当前定义合约中访问，子合约无法访问\n// contract privateTest {\n//     uint8 private id;\n//     function setId(uint8 newId) public {\n//         id = newId;\n//     }\n//     function getId() public view returns (uint8) {\n//         return getIdByprivate();\n//     }\n\n//     function getIdByprivate() private view returns(uint8) {\n//         return id;\n//     }\n// }\n\n// contract subprivateTest is privateTest {\n//     function getsubId() public view returns(uint8) {\n//         // return id;\n//         // return getIdByprivate();\n//         return getId();\n\n//     }\n// }\n\n// 可以修饰变量和函数，函数的默认类型为public，变量的默认类型为internal（不能为external）。\n// 内部调用不会产生EVM调用也称为消息调用，外部调用会产生EVM调用\n// public 在合约外部和合约内部都可以调用\n// external 外部调用，只能在合约外部调用（如果在合约内部包括继承子合约调用，调用需要通过this，不推荐这样），需要this访问，因为只能在合约外部访问，所以子合约也不能override\n// internal 内部调用，当前合约和继承子合约可以调用\n// private  只能当前合约中访问，继承子合约无法访问\n\n// contract FunctionTypes {\n//     uint256 public number = 5;\n\n//     function add(uint256 n) external pure returns(uint256) {\n//         return n + 1;\n//     }\n\n//     function add1() external view returns(uint256) {\n//         return number + 1;\n//     }\n\n//     function add2() external {\n//         number = 10;\n//     }\n// }\n\n// pure 不能读也不能写链上的状态变量number，传入参数进行简单操作\n// view 可以读到链上的状态变量，但是不能写\n// 默认可以读写\n\n// contract PayTest {\n//     function getbalance() public view returns(uint){\n//         return address(this).balance;\n//     }\n\n//     function getaddr() public view returns(address){\n//         return address(this);\n//     }\n//     function transferToContract() public payable returns(uint256) {\n//         return address(this).balance;\n//     }\n//     // 给调用者转账\n//     function transferFromContract() public payable {\n//         payable(address(msg.sender)).transfer(10**18 wei);\n//     }\n// }\n\n// contract Payable {\n//     address payable public owner;\n//     constructor() {\n//         owner = payable(msg.sender);\n//     }\n\n//     function deposit() external payable {\n\n//     }\n//     function getBalance() external view returns(uint) {\n//         return address(this).balance;\n//     }\n// }\n\n// payable 函数在被调用的时候会将value转入到合约\n// 全局变量 msg.sender msg.value msg表示调用这个函数的地址，可能是一个人也有可能是一个合约\n\n// contract Constants {\n//     address public constant MY_ADDRESS = 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;\n//     uint public constant MY_UINT = 123;\n// }\n\n// contract ConstantsNew {\n//     address public MY_ADDRESS = 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;\n//     uint public MY_UINT = 123;\n// }\n\n// contract Immutable {\n//     // address public immutable owner = msg.sender;\n\n//     address public immutable owner;\n//     constructor(address x) {\n//         owner = x;\n//     }\n// }\n\n// constant 更节省gas，如果状态变量声明为 constant (常量)。在这种情况下，只能使用那些在编译时有确定值的表达式来给它们赋值。\n// 使用immutable更节省gas，声明为不可变量(immutable)的变量的限制要比声明为常量(constant) 的变量的限制少：可以在合约的构造函数中或声明时为不可变的变量分配任意值。 不可变量在构造期间无法读取其值，并且只能赋值一次。\n\n// contract Error {\n//     error MyError(address caller, uint i);\n\n//     function testRequire(uint _i) public pure {\n//         require(_i <= 10, \"require: i > 10\");\n//     }\n//     function testRevert(uint _r) public pure {\n//         if (_r > 10) {\n//             revert(\"revert: r > 10\");\n//         }\n//     }\n//     function testAssert(uint _a) public pure {\n//         assert(_a == 123);\n//     }\n//     function testCustomError(uint _i) public view {\n//         if (_i > 10) {\n//             revert MyError(msg.sender, _i);\n//         }\n//     }\n// }\n\n// require revert assert 具有gas费的退还，状态的回滚\n// 自定义错误有节省gas的作用\n\n// contract FunctionModifier {\n//     bool public paused;\n//     uint public count;\n\n//     function setPaused(bool _paused) external {\n//         paused = _paused;\n//     }\n\n//     modifier whenNotPaused() {\n//         require(!paused, \"paused\");\n//         _;\n//     }\n\n//     modifier cap(uint _x) {\n//         require(_x > 10, \"require error\");\n//         _;\n//         count += 1;\n//     }\n\n//     function inc(uint _x) external whenNotPaused cap(_x) {\n//         count += _x;\n//     }\n// }\n// 函数修改器\n\n// contract FunctionOutputs {\n//     function returnMany() public pure returns(uint x, bool b) {\n//         return (1, true);\n//     }\n\n//     function callRetrun() public pure returns(bool) {\n//         // (uint x, bool b) = returnMany();\n//         // return (x, b);\n//         (, bool b) = returnMany();\n//         return b;\n//     }\n// }\n\n// contract Array {\n//     uint[] public nums = [1, 2, 3]; // 可变长度数组\n//     uint[3] public numsFixed = [4, 5, 6]; // 不可变长度数组\n\n//     function examples() external {\n//         nums.push(4);\n//         delete nums[1]; // 不能删除元素，置为0，可以使用pop\n//         nums.pop();\n//         uint len = nums.length;\n\n//         // create array in memory，在内存中只能定义定长数组，不能使用push pop方法\n//         uint[] memory a = new uint[](5);\n//     }\n\n//     function getAllArray() external view returns(uint[] memory) {\n//         return nums;\n//     }\n\n// }\n\n// 数组\n\n// contract memoryStorage {\n//     uint public a = 1;\n\n//     function modifierFun(uint memory x) external returns(uint) {\n//         uint b = x;\n//         return b;\n//     }\n// }\n// 状态变量 – 变量值永久保存在合约存储空间中的变量。\n// 局部变量 – 变量值仅在函数执行过程中有效的变量，函数退出后，变量无效。\n// 全局变量 – 保存在全局命名空间，用于获取区块链相关信息的特殊变量。\n\n// solidity数据存储位置有三类：storage，memory和calldata。\n// memory：函数里的参数和临时变量一般用memory，存储在内存中，不上链。\n// calldata：和memory类似，存储在内存中，不上链。与memory的不同点在于calldata变量不能修改immutable。\n// storage：合约中状态变都为storage，存储在以太坊区块链中\n/* \nExplicit data location for all variables of struct, array or mapping types is now mandatory. \nThis is also applied to function parameters and return variables.\n For example, change uint[] x = m_x to uint[] storage x = m_x, and function f(uint[][] x) to function f(uint[][] memory x) where memory is the data location and might be replaced by storage or calldata accordingly.\n  Note that external functions require parameters with a data location of calldata.\n*/\n\n// storage给storage赋值或者memory给memory赋值，是创建引用，不同之间的两两赋值是创建副本。\n\n\n// contract Mapping {\n//     mapping(address => uint) public balances;\n//     mapping(address => mapping(address => bool)) public isFriends;\n\n//     function MappingFun() external {\n//         balances[msg.sender] = 123;\n//         uint val1 = balances[msg.sender];\n//         uint val2 = balances[address(1)]; // 返回uint 的默认值0\n\n//         isFriends[msg.sender][address(this)] = true;\n//     }\n// }\n\n// contract TestContract1 {\n//     address public owner = msg.sender;\n\n//     function setOwner(address _owner) public {\n//         require(msg.sender == owner, \"not owner\");\n//         owner = _owner;\n//     }\n// }\n\n// contract TestContract2 {\n//     address public owner = msg.sender;\n//     uint public value = msg.value;\n//     uint public x;\n//     uint public y;\n\n//     constructor(uint _x, uint _y) payable {\n//         x = _x;\n//         y = _y;\n//     }\n// }\n\n// contract Proxy {\n//     event Deploy(address);\n\n//     function deploy(bytes memory _code) external payable returns (address addr) {\n//         assembly {\n//             addr := create(callvalue(), add(_code, 0x20), mload(_code))\n//         }\n//         require(addr != address(0), \"deploy failed\");\n//         emit Deploy(addr);\n//     }\n\n//     function execute(address _target, bytes memory _data) external payable {\n//         (bool sucess, ) = _target.call{value: msg.value}(_data);\n//         require(sucess, \"failed\");\n//     }\n\n    \n// }\n\n// contract Helper {\n//     function getBytecode1() external pure returns (bytes memory) {\n//         bytes memory bytecode = type(TestContract1).creationCode;\n//         return bytecode;\n//     }\n\n//     function getBytecode2(uint _x, uint _y) external pure returns (bytes memory) {\n//         bytes memory bytecode = type(TestContract2).creationCode;\n//         return abi.encodePacked(bytecode, abi.encode(_x, _y)); // 构造函数\n//     }\n\n//     function getCalldata(address _owner) external pure returns (bytes memory) {\n//         return abi.encodeWithSignature(\"setOwner(address)\", _owner);\n//     }\n// }\n\n// 代理合约\n\n// contract Event {\n//     event Log(string message, uint val);\n//     event IndexedLog(address indexed sender, uint val); // indexed 可以链上检索\n\n//     function example() external { //也是一个写入方法\n//         emit Log(\"foo\", 1234);\n//         emit IndexedLog(msg.sender, 789);\n//     }\n\n//     event Message(address indexed _from, address indexed _to, string message);\n\n//     function sendMessage(address _to, string calldata message) external {\n//         emit Message(msg.sender, _to, message);\n//     }\n\n// }\n\n// contract Account {\n//     address public bank;\n//     address public owner;\n\n//     constructor(address _owner) payable {\n//         owner = _owner;\n//         bank = msg.sender;\n//     }\n// }\n\n// contract AccountFactory {\n//     uint public b;\n//     Account[] public accounts;\n//     function createAccount(address _owner) external payable {\n//         Account account = new Account{value: 111}(_owner);\n//         accounts.push(account);\n//     }\n//     function getBalance(address _owner) external {\n//         b =  _owner.balance;\n//     }\n// }\n\n// 工厂合约\n\n// EVENT 体现在区块链浏览器或者交易记录中的logs中\n\n// contract A {\n//     function foo() public pure virtual returns (string memory) {\n//         return 'A';\n//     }\n// }\n\n// contract B is A {\n//     function foo() public pure override virtual returns (string memory) {\n//         return \"B\";\n//     }\n// }\n\n// contract C is B {\n//     function foo() public pure override virtual returns (string memory) {\n//         return \"C\";\n//     }\n// }\n\n// contract X is A, B { // 顺序从最接近基类的开始到最派生的顺序\n//     function foo() public pure override(A, B) virtual returns (string memory) {\n//         return \"X\";\n//     }\n// }\n// virtual 可以被子合约重写，override 重写父合约\n\n// ---------------\n\n// contract S {\n//     string public name;\n//     constructor(string memory _name) {\n//         name = _name;\n//     }\n// }\n\n// contract T {\n//     string public text;\n//     constructor(string memory _text) {\n//         text = _text;\n//     }\n// }\n\n// contract Z is S, T {\n//     constructor(string memory _name, string memory _text) S(_name) T(_text) {\n\n//     }\n// }\n// 继承构造函数初始化\n\n// contract E {\n//     event Log(string message);\n\n//     function foo() public virtual {\n//         emit Log(\"E.foo\");\n//     }\n\n//     function bar() public virtual {\n//         emit Log(\"E.bar\");\n//     }\n// }\n\n// contract F is E {\n//     function foo() public virtual override {\n//         emit Log(\"F.foo\");\n//         E.foo();\n//     }\n\n//     function bar() public virtual override {\n//         emit Log(\"F.bar\");\n//         super.bar();\n//     }\n// }\n\n// contract G is E {\n//     function foo() public virtual override {\n//         emit Log(\"G.foo\");\n//         E.foo();\n//     }\n\n//     function bar() public virtual override {\n//         emit Log(\"G.bar\");\n//         super.bar();\n//     }\n// }\n\n// contract H is F, G {\n//     function foo() public virtual override(F, G) {\n//         emit Log(\"H.foo\");\n//         F.foo();\n//     }\n\n//     function bar() public virtual override(F, G) {\n//         emit Log(\"H.bar\");\n//         super.bar();\n//     }\n// }\n\n// 调用父级合约\n\n// contract Fallback {\n//     event Log(string func, address sender, uint value, bytes data);\n//     fallback() external payable {\n//         emit Log(\"fallback\", msg.sender, msg.value, msg.data);\n//     }\n//     receive() external payable {\n//         emit Log(\"receive\", msg.sender, msg.value, \"\");\n//     } \n// }\n\n// fallback回退函数当调用函数在合约不存在或者向合约中发放主币的时候（回退函数是payable的时候）\n// msg.data存在的时候调用fallback，不存在调用receive，如果receive不存在，那么还是调用fallback\n\n// contract SendEther {\n//     constructor() payable {}\n//     // receive() external payable {}\n\n//     function getBalance() external view returns (uint) {\n//         return address(this).balance;\n//     }\n//     function sendViaTransfer(address payable _to) external payable {\n//         // 发送主币的时候只携带2300个gas，如果gas消耗完或者发送主币的时候对方拒收或者逻辑异常，会revert\n//         _to.transfer(123);\n//     }\n//     function sendViaSend(address payable _to) external payable {\n//         // 发送主币的时候只携带2300个gas，会返回一个bool值，发送失败不会自动revert交易，几乎没有人用它\n//        bool s = _to.send(123);\n//        require(s, \"send faild\");\n//     }\n\n//     function sendViaCall(address payable _to) external payable {\n//         // 会发送所有剩余的gas，返回一个bool和一个data，是最提倡的方法\n//        (bool success, ) =  _to.call{value: 123}(\"\");\n//        require(success, \"call faild\");\n//     }\n// }\n\ncontract EthReceiver {\n    event Log(uint amount , uint gas);\n\n    receive() external payable {\n        emit Log(msg.value, gasleft());\n    } \n}\n// 三种发送主币的方法\n\n// contract TestContract {\n//     uint public x;\n//     uint public value = 123;\n\n//     function setX(uint _x) external {\n//         x = _x;\n//     }\n//     function getX() external view returns(uint) {\n//         return x;\n//     }\n//     function setXandReceiveEther(uint _x) external payable {\n//         x = _x;\n//         value = msg.value;\n//     }\n//     function getXandValue() external view returns (uint, uint) {\n//         return (x, value);\n//     }\n// }\n\n// contract CallTestContract {\n//     function setX(address _address, uint _x) external {\n//         TestContract(_address).setX(_x);\n//     }\n//     function getX(address _address) external view returns (uint) {\n//         return TestContract(_address).getX();\n//     } \n//     function setXandReceiveEther(address _address, uint _x) external payable {\n//         TestContract(_address).setX(_x);\n//         TestContract(_address).setXandReceiveEther{value: msg.value}(_x);\n//     }\n//     function getXandValue(address _address) external view returns (uint _x, uint _value) {\n//         (_x, _value) = TestContract(_address).getXandValue();\n//     }\n// }\n// 一个合约调用另一个合约\n\n// contract Counter {\n//     uint public count;\n\n//     function inc() external {\n//         count += 1;\n//     }\n\n// }\n\n\n// interface ICounter {\n//     function count() external view returns (uint);\n//     function inc() external;\n// }\n\n// contract CallInterface {\n//     uint public count;\n//     function callExample(address _address) external returns(uint) {\n//         ICounter(_address).inc();\n//         count = ICounter(_address).count();\n//         return count;\n//     }\n// }\n\n// 接口合约\n// contract TestCall {\n//     string public message;\n//     uint public x;\n\n//     event Log(string message);\n\n//     fallback() external payable {\n//         emit Log(\"fallback was called\");\n//     }\n\n//     function foo(string memory _message, uint _x) external payable returns (bool, uint) {\n//         message = _message;\n//         x = _x;\n//         return (true, 999);\n//     }\n// }\n\n// contract Call {\n//     bytes public data;\n//     function callFoo(address _address) external payable {\n//         (bool success, bytes memory _data) = _address.call{value: 111}(abi.encodeWithSignature(\"foo(string,uint256)\", \"call foo\", 123));\n//         require(success, \"call faild\");\n//         data = _data;\n//     }\n\n//     function callDotExit(address _address) external {\n//         (bool success, ) = _address.call(abi.encodeWithSignature(\"callDotExit()\"));\n//         require(success, \"call faild\");\n//     }\n// }\n\n// 低级call使用\n\n\n// contract TestDelegateCall {\n//     uint public num;\n//     address public sender;\n//     uint public value;\n\n//     function setVars(uint _num) external payable {\n//         num = _num;\n//         sender = msg.sender;\n//         value = msg.value;\n//     }\n// }\n\n// contract DelegateCall {\n//     uint public num;\n//     address public sender;\n//     uint public value;\n\n//     function setVars(address _address, uint _num) external payable {\n//         // _address.delegatecall(abi.encodeWithSignature(\"setVars(uint256)\", _num));\n//         (bool success, bytes memory _data) = _address.delegatecall(\n//             abi.encodeWithSelector(TestDelegateCall.setVars.selector, _num)\n//         );\n//         require(success, \"fail call\");\n//     }\n// }\n\n// 委托调用，被委托调用合约的状态变量不会改变，只会使用被委托调用合约的逻辑。\n\n// library ArrayLib {\n//     function find(uint[] storage _arr, uint x) internal view returns(uint) {\n//         for (uint i = 0; i < _arr.length; i++) {\n//             if (_arr[i] == x) {\n//                 return i;\n//             }\n//         }\n//         return 10;\n\n//     }\n// }\n\n// contract TestArray {\n//     using ArrayLib for uint[];\n//     uint[] public arr = [1, 3, 2];\n\n//     function findTest() external view returns(uint) {\n//         // return ArrayLib.find(2);\n//         return arr.find(2); // 更推荐\n//     }\n// }\n// 库合约的调用\n\n// contract hashF {\n//     function hash(string memory _text, string memory _otherText) external pure returns(bytes32) {\n//         // return keccak256(abi.encode(_text, _otherText));\n//         return keccak256(abi.encodePacked(_text, _otherText));\n//     }\n// }\n\n/* hash算法 \n1. 输入值相同输出值一定相同 2. 不可逆\nabi.encodePacked 结果不补0 \"AAA\" \"BBB\" 和 \"AA\" \"ABBB\" 结果相同，可能会有不同的输入值相同的hasn值，可以在两个打包的字符串之间加上一个隔断符号\nabi.encode 结果补0\n\n*/ \n\n\n// contract VerfySig {\n//     function verify(address _signer, string memory _message, bytes memory _sig)\n//         external pure returns(bool) \n//     {\n//         bytes32 messageHash = getMessageHash(_message);\n//         bytes32 ethSignMessageHash = getEthSigndMessageHash(messageHash);\n//         return recover(ethSignMessageHash, _sig) == _signer;\n//     }\n\n//     function getMessageHash(string memory _message) public pure returns(bytes32) {\n//         return keccak256(abi.encodePacked(_message));\n//     }\n//     function getEthSigndMessageHash(bytes32 _message) public pure returns(bytes32) {\n//         return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _message));\n//     }\n//     function recover(bytes32 _ethSignedMessageHash, bytes memory _sig) public pure returns(address) {\n//         (bytes32 r, bytes32 s, uint8 v) = _split(_sig);\n//         return ecrecover(_ethSignedMessageHash, v, r, s);\n//     }\n\n//     function _split(bytes memory _sig) internal pure returns(bytes32 r, bytes32 s, uint8 v) {\n//         require(_sig.length == 65, \"invalid signature length\");\n//         assembly {\n//             r := mload(add(_sig, 32))\n//             s := mload(add(_sig, 64))\n//             v := byte(0, mload(add(_sig, 96)))\n//         }\n//     }\n// }\n/*\nChrome Metamask \nethereum.enable()\naccount = \"0xc4cb0f670dfdc7c28f49f63feaacb2e10bafdec7\"\nhash = \"0x9c97d796ed69b7e69790ae723f51163056db3d55a7a6a82065780460162d4812\"\nethereum.request({method: \"personal_sign\", params: [account, hash]})\n*/\n\n// contract Kill {\n//     constructor() payable {}\n//     function kill() external {\n//         selfdestruct(payable(msg.sender));\n//     }\n//     function test() external pure returns(uint) {\n//         return 123;\n//     }\n// }\n\n// 1 删除合约 2 强制发送主币到一个地址，为什么说强制，即使接受合约没有接受主币的回退函数都可以接受\n\n// interface IERC721 {\n//     function transferFrom(\n//         address _from,\n//         address _to,\n//         uint _nftId\n//     ) external;\n// }\n\n// contract DutchAuction {\n//     uint private constant DURATION = 7 days;\n\n//     IERC721 public immutable nft;\n//     uint public immutable nftId;\n\n//     address payable public immutable seller;\n//     uint public immutable startingPrice;\n//     uint public immutable startAt;\n//     uint public immutable expiresAt;\n//     uint public immutable discountRate;\n\n//     constructor(\n//         uint _startingPrice,\n//         uint _discountRate,\n//         address _nft,\n//         uint _nftId\n//     ) {\n//         seller = payable(msg.sender);\n//         startingPrice = _startingPrice;\n//         startAt = block.timestamp;\n//         expiresAt = block.timestamp + DURATION;\n//         discountRate = _discountRate;\n\n//         require(_startingPrice >= _discountRate * DURATION, \"starting price < min\");\n\n//         nft = IERC721(_nft);\n//         nftId = _nftId;\n//     }\n\n//     function getPrice() public view returns (uint) {\n//         uint timeElapsed = block.timestamp - startAt;\n//         uint discount = discountRate * timeElapsed;\n//         return startingPrice - discount;\n//     }\n\n//     function buy() external payable {\n//         require(block.timestamp < expiresAt, \"auction expired\");\n\n//         uint price = getPrice();\n//         require(msg.value >= price, \"ETH < price\");\n\n//         nft.transferFrom(seller, msg.sender, nftId);\n//         uint refund = msg.value - price;\n//         if (refund > 0) {\n//             payable(msg.sender).transfer(refund);\n//         }\n//         selfdestruct(seller);\n//     }\n// }\n\n// 荷兰拍卖\n\n// contract TestMultiCall {\n//     function func1() external view returns(uint, uint) {\n//         return (1, block.timestamp);\n//     }\n//     function func2() external view returns(uint, uint) {\n//         return (2, block.timestamp);\n//     }\n\n//     function getData1() external pure returns (bytes memory) {\n//         return abi.encodeWithSelector(this.func1.selector);\n//     }\n//     function getData2() external pure returns (bytes memory) {\n//         return abi.encodeWithSelector(this.func2.selector);\n//     }\n// }\n\n// contract MultiCall {\n//     function multiCall(address[] calldata targets, bytes[] calldata data) external view returns(bytes[] memory) {\n//         require(targets.length == data.length, \"target length != data length\");\n//         bytes[] memory results = new bytes[](data.length);\n//         for (uint i = 0; i < targets.length; i++) {\n//             (bool success, bytes memory result) = targets[i].staticcall(data[i]);\n//             require(success, \"call faild\");\n//             results[i] = result;\n//         }\n//         return results;\n//     }\n// }\n\n// 静态调用\n// rpc节点限制每个客户端调用频率，合约的调用打包成一起一次性调用"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"HelloWord.sol": {
				"EthReceiver": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "gas",
									"type": "uint256"
								}
							],
							"name": "Log",
							"type": "event"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"HelloWord.sol\":15913:16057  contract EthReceiver {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"HelloWord.sol\":15913:16057  contract EthReceiver {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_2, calldatasize)\n        /* \"HelloWord.sol\":16022:16047  Log(msg.value, gasleft()) */\n      0xbd0faddf87043dd749c1b9d4dca8a12589b8cb5e2106832111ce23f219b14367\n        /* \"HelloWord.sol\":16026:16035  msg.value */\n      callvalue\n        /* \"HelloWord.sol\":16037:16046  gasleft() */\n      gas\n        /* \"HelloWord.sol\":16022:16047  Log(msg.value, gasleft()) */\n      mload(0x40)\n      tag_5\n      swap3\n      swap2\n      swap1\n      tag_6\n      jump\t// in\n    tag_5:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"HelloWord.sol\":15913:16057  contract EthReceiver {... */\n      stop\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"#utility.yul\":7:125   */\n    tag_8:\n        /* \"#utility.yul\":94:118   */\n      tag_10\n        /* \"#utility.yul\":112:117   */\n      dup2\n        /* \"#utility.yul\":94:118   */\n      tag_11\n      jump\t// in\n    tag_10:\n        /* \"#utility.yul\":89:92   */\n      dup3\n        /* \"#utility.yul\":82:119   */\n      mstore\n        /* \"#utility.yul\":7:125   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":131:463   */\n    tag_6:\n        /* \"#utility.yul\":252:256   */\n      0x00\n        /* \"#utility.yul\":290:292   */\n      0x40\n        /* \"#utility.yul\":279:288   */\n      dup3\n        /* \"#utility.yul\":275:293   */\n      add\n        /* \"#utility.yul\":267:293   */\n      swap1\n      pop\n        /* \"#utility.yul\":303:374   */\n      tag_13\n        /* \"#utility.yul\":371:372   */\n      0x00\n        /* \"#utility.yul\":360:369   */\n      dup4\n        /* \"#utility.yul\":356:373   */\n      add\n        /* \"#utility.yul\":347:353   */\n      dup6\n        /* \"#utility.yul\":303:374   */\n      tag_8\n      jump\t// in\n    tag_13:\n        /* \"#utility.yul\":384:456   */\n      tag_14\n        /* \"#utility.yul\":452:454   */\n      0x20\n        /* \"#utility.yul\":441:450   */\n      dup4\n        /* \"#utility.yul\":437:455   */\n      add\n        /* \"#utility.yul\":428:434   */\n      dup5\n        /* \"#utility.yul\":384:456   */\n      tag_8\n      jump\t// in\n    tag_14:\n        /* \"#utility.yul\":131:463   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":469:546   */\n    tag_11:\n        /* \"#utility.yul\":506:513   */\n      0x00\n        /* \"#utility.yul\":535:540   */\n      dup2\n        /* \"#utility.yul\":524:540   */\n      swap1\n      pop\n        /* \"#utility.yul\":469:546   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa26469706673582212203081faa0aab72259005a6b0da74113e0e96a0056d9d89dc053c7c1338311b69364736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5060b88061001f6000396000f3fe6080604052366041577fbd0faddf87043dd749c1b9d4dca8a12589b8cb5e2106832111ce23f219b14367345a60405160379291906053565b60405180910390a1005b600080fd5b604d816078565b82525050565b6000604082019050606660008301856046565b607160208301846046565b9392505050565b600081905091905056fea26469706673582212203081faa0aab72259005a6b0da74113e0e96a0056d9d89dc053c7c1338311b69364736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB8 DUP1 PUSH2 0x1F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH1 0x41 JUMPI PUSH32 0xBD0FADDF87043DD749C1B9D4DCA8A12589B8CB5E2106832111CE23F219B14367 CALLVALUE GAS PUSH1 0x40 MLOAD PUSH1 0x37 SWAP3 SWAP2 SWAP1 PUSH1 0x53 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4D DUP2 PUSH1 0x78 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH1 0x66 PUSH1 0x0 DUP4 ADD DUP6 PUSH1 0x46 JUMP JUMPDEST PUSH1 0x71 PUSH1 0x20 DUP4 ADD DUP5 PUSH1 0x46 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDRESS DUP2 STATICCALL LOG0 0xAA 0xB7 0x22 MSIZE STOP GAS PUSH12 0xDA74113E0E96A0056D9D89D 0xC0 MSTORE8 0xC7 0xC1 CALLER DUP4 GT 0xB6 SWAP4 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "15913:144:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_18": {
									"entryPoint": null,
									"id": 18,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 70,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 83,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 120,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:549:1",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "72:53:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "89:3:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "112:5:1"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "94:17:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "94:24:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "82:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "82:37:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "82:37:1"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "60:5:1",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "67:3:1",
														"type": ""
													}
												],
												"src": "7:118:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "257:206:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "267:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "279:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "290:2:1",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "275:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "275:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "267:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "347:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "360:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "371:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "356:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "356:17:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "303:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "303:71:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "303:71:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "428:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "441:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "452:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "437:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "437:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "384:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "384:72:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "384:72:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "221:9:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "233:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "241:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "252:4:1",
														"type": ""
													}
												],
												"src": "131:332:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "514:32:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "524:16:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "535:5:1"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "524:7:1"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "496:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "506:7:1",
														"type": ""
													}
												],
												"src": "469:77:1"
											}
										]
									},
									"contents": "{\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n}\n",
									"id": 1,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052366041577fbd0faddf87043dd749c1b9d4dca8a12589b8cb5e2106832111ce23f219b14367345a60405160379291906053565b60405180910390a1005b600080fd5b604d816078565b82525050565b6000604082019050606660008301856046565b607160208301846046565b9392505050565b600081905091905056fea26469706673582212203081faa0aab72259005a6b0da74113e0e96a0056d9d89dc053c7c1338311b69364736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH1 0x41 JUMPI PUSH32 0xBD0FADDF87043DD749C1B9D4DCA8A12589B8CB5E2106832111CE23F219B14367 CALLVALUE GAS PUSH1 0x40 MLOAD PUSH1 0x37 SWAP3 SWAP2 SWAP1 PUSH1 0x53 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4D DUP2 PUSH1 0x78 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH1 0x66 PUSH1 0x0 DUP4 ADD DUP6 PUSH1 0x46 JUMP JUMPDEST PUSH1 0x71 PUSH1 0x20 DUP4 ADD DUP5 PUSH1 0x46 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDRESS DUP2 STATICCALL LOG0 0xAA 0xB7 0x22 MSIZE STOP GAS PUSH12 0xDA74113E0E96A0056D9D89D 0xC0 MSTORE8 0xC7 0xC1 CALLER DUP4 GT 0xB6 SWAP4 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "15913:144:0:-:0;;;;;;16022:25;16026:9;16037;16022:25;;;;;;;:::i;:::-;;;;;;;;15913:144;;;;;7:118:1;94:24;112:5;94:24;:::i;:::-;89:3;82:37;7:118;;:::o;131:332::-;252:4;290:2;279:9;275:18;267:26;;303:71;371:1;360:9;356:17;347:6;303:71;:::i;:::-;384:72;452:2;441:9;437:18;428:6;384:72;:::i;:::-;131:332;;;;;:::o;469:77::-;506:7;535:5;524:16;;469:77;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "36800",
								"executionCost": "87",
								"totalCost": "36887"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 15913,
									"end": 16057,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 15913,
									"end": 16057,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 15913,
									"end": 16057,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 15913,
									"end": 16057,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 15913,
									"end": 16057,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 15913,
									"end": 16057,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 15913,
									"end": 16057,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 15913,
									"end": 16057,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 15913,
									"end": 16057,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 15913,
									"end": 16057,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 15913,
									"end": 16057,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 15913,
									"end": 16057,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 15913,
									"end": 16057,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 15913,
									"end": 16057,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 15913,
									"end": 16057,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 15913,
									"end": 16057,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 15913,
									"end": 16057,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 15913,
									"end": 16057,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 15913,
									"end": 16057,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 15913,
									"end": 16057,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 15913,
									"end": 16057,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212203081faa0aab72259005a6b0da74113e0e96a0056d9d89dc053c7c1338311b69364736f6c63430008070033",
									".code": [
										{
											"begin": 15913,
											"end": 16057,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 15913,
											"end": 16057,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 15913,
											"end": 16057,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 15913,
											"end": 16057,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 15913,
											"end": 16057,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 15913,
											"end": 16057,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 16022,
											"end": 16047,
											"name": "PUSH",
											"source": 0,
											"value": "BD0FADDF87043DD749C1B9D4DCA8A12589B8CB5E2106832111CE23F219B14367"
										},
										{
											"begin": 16026,
											"end": 16035,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 16046,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 16022,
											"end": 16047,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 16022,
											"end": 16047,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 16022,
											"end": 16047,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 16022,
											"end": 16047,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 16022,
											"end": 16047,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 16022,
											"end": 16047,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 16022,
											"end": 16047,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 16022,
											"end": 16047,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 16022,
											"end": 16047,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 16022,
											"end": 16047,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 16022,
											"end": 16047,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 16022,
											"end": 16047,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 16022,
											"end": 16047,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 16022,
											"end": 16047,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 16022,
											"end": 16047,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 16022,
											"end": 16047,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 16022,
											"end": 16047,
											"name": "LOG1",
											"source": 0
										},
										{
											"begin": 15913,
											"end": 16057,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 15913,
											"end": 16057,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 15913,
											"end": 16057,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 15913,
											"end": 16057,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 15913,
											"end": 16057,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 15913,
											"end": 16057,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 7,
											"end": 125,
											"name": "tag",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 7,
											"end": 125,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 94,
											"end": 118,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 112,
											"end": 117,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 94,
											"end": 118,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 94,
											"end": 118,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 94,
											"end": 118,
											"name": "tag",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 94,
											"end": 118,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 89,
											"end": 92,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 82,
											"end": 119,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7,
											"end": 125,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7,
											"end": 125,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7,
											"end": 125,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 131,
											"end": 463,
											"name": "tag",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 131,
											"end": 463,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 252,
											"end": 256,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 290,
											"end": 292,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 279,
											"end": 288,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 275,
											"end": 293,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 267,
											"end": 293,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 267,
											"end": 293,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 303,
											"end": 374,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 371,
											"end": 372,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 360,
											"end": 369,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 356,
											"end": 373,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 347,
											"end": 353,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 303,
											"end": 374,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 303,
											"end": 374,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 303,
											"end": 374,
											"name": "tag",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 303,
											"end": 374,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 384,
											"end": 456,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 452,
											"end": 454,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 441,
											"end": 450,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 437,
											"end": 455,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 428,
											"end": 434,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 384,
											"end": 456,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 384,
											"end": 456,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 384,
											"end": 456,
											"name": "tag",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 384,
											"end": 456,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 131,
											"end": 463,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 131,
											"end": 463,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 131,
											"end": 463,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 131,
											"end": 463,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 131,
											"end": 463,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 131,
											"end": 463,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 469,
											"end": 546,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 469,
											"end": 546,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 506,
											"end": 513,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 535,
											"end": 540,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 524,
											"end": 540,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 524,
											"end": 540,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 469,
											"end": 546,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 469,
											"end": 546,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 469,
											"end": 546,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 469,
											"end": 546,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"HelloWord.sol\":\"EthReceiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"HelloWord.sol\":{\"keccak256\":\"0xac7e64eb87e03c78d8ae660d7cd61672f14e3bdaae1ee7b87292e88382e69239\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db21db10c678616768c667af3e9bc050dd187b94fc51253b0bc5f4b2b32ac710\",\"dweb:/ipfs/QmTtS49LvBz6c7gEWSQ8oWpfwx9rQRJwYMRJc8UFJRsi8o\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"HelloWord.sol": {
				"ast": {
					"absolutePath": "HelloWord.sol",
					"exportedSymbols": {
						"EthReceiver": [
							19
						]
					},
					"id": 20,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.8",
								".7"
							],
							"nodeType": "PragmaDirective",
							"src": "32:22:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 19,
							"linearizedBaseContracts": [
								19
							],
							"name": "EthReceiver",
							"nameLocation": "15922:11:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"id": 7,
									"name": "Log",
									"nameLocation": "15946:3:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "15955:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 7,
												"src": "15950:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "15950:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 5,
												"indexed": false,
												"mutability": "mutable",
												"name": "gas",
												"nameLocation": "15969:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 7,
												"src": "15964:8:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "15964:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15949:24:0"
									},
									"src": "15940:34:0"
								},
								{
									"body": {
										"id": 17,
										"nodeType": "Block",
										"src": "16007:47:0",
										"statements": [
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 11,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "16026:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 12,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "16026:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 13,
																"name": "gasleft",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967289,
																"src": "16037:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_gasleft_view$__$returns$_t_uint256_$",
																	"typeString": "function () view returns (uint256)"
																}
															},
															"id": 14,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "16037:9:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 10,
														"name": "Log",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "16022:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (uint256,uint256)"
														}
													},
													"id": 15,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16022:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 16,
												"nodeType": "EmitStatement",
												"src": "16017:30:0"
											}
										]
									},
									"id": 18,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15987:2:0"
									},
									"returnParameters": {
										"id": 9,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16007:0:0"
									},
									"scope": 19,
									"src": "15980:74:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 20,
							"src": "15913:144:0",
							"usedErrors": []
						}
					],
					"src": "32:25465:0"
				},
				"id": 0
			}
		}
	}
}